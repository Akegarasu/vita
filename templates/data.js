var datas = {"problems": [{"context": "    49   \n    50   \t// path traversal\n    51   \tkey := keys[0]\n--> 52   \tf, _ := os.Create(key)\n    53   \tf.Close()\n    54   \tlog.Println(\"Url Param 'key' is: \" + string(key))\n    55   \tos.Open(key)\n    56   ", "match_type": "regex", "match_rule": "(os)\\.(Create|Open|OpenFile)", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\combined\\serverTest.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.4}, {"context": "    52   \tf, _ := os.Create(key)\n    53   \tf.Close()\n    54   \tlog.Println(\"Url Param 'key' is: \" + string(key))\n--> 55   \tos.Open(key)\n    56   \n    57   \t// sql injection\n    58   \treader := bufio.NewReader(os.Stdin)\n    59   \thiddenMessage, _ := reader.ReadString('\\n')", "match_type": "regex", "match_rule": "(os)\\.(Create|Open|OpenFile)", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\combined\\serverTest.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.4}, {"context": "    82   \t\ttmp = \"./etc/passwd\"\n    83   \t}\n    84   \tDirTraversal6(tmp)\n--> 85   \tos.Open(temp8(key)) //another false negative here by gosec!!\n    86   \n    87   \t// rsa safe scenario\n    88   \ttmp2 := 200\n    89   \ttmp3 := 1000", "match_type": "regex", "match_rule": "(os)\\.(Create|Open|OpenFile)", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\combined\\serverTest.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.4}, {"context": "    105   }\n    106   \n    107   func DirTraversal6(folderPath string) {\n--> 108   \tf2, _ := os.Create(folderPath)\n    109   \tos.Open(folderPath)\n    110   \tx5 := \"safe\"\n    111   \tnum := 1000\n    112   \tcmdInjection(x5, num)", "match_type": "regex", "match_rule": "(os)\\.(Create|Open|OpenFile)", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\combined\\serverTest.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.4}, {"context": "    106   \n    107   func DirTraversal6(folderPath string) {\n    108   \tf2, _ := os.Create(folderPath)\n--> 109   \tos.Open(folderPath)\n    110   \tx5 := \"safe\"\n    111   \tnum := 1000\n    112   \tcmdInjection(x5, num)\n    113   \tf2.Close()", "match_type": "regex", "match_rule": "(os)\\.(Create|Open|OpenFile)", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\combined\\serverTest.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.4}, {"context": "    32   \tctx, cancel := context.WithTimeout(context.Background(), 100*time.Millisecond)\n    33   \tdefer cancel()\n    34   \n--> 35   \tif err := exec.CommandContext(ctx, text1, text2).Run(); err != nil {\n    36   \t\t// This will fail after 100 milliseconds. The 5 second sleep\n    37   \t\t// will be interrupted.\n    38   \t}\n    39   }", "match_type": "ast", "match_rule": "CommandContext", "description": "Command injection may occur", "file_path": "./test\\go-vulns\\command_injection\\commandContext.go", "language": "go", "severity": "critical", "ptype": "vuln", "confidence": 0.3}, {"context": "    32   \tctx, cancel := context.WithTimeout(context.Background(), 100*time.Millisecond)\n    33   \tdefer cancel()\n    34   \n--> 35   \tif err := exec.CommandContext(ctx, text1, text2).Run(); err != nil {\n    36   \t\t// This will fail after 100 milliseconds. The 5 second sleep\n    37   \t\t// will be interrupted.\n    38   \t}\n    39   }", "match_type": "ast", "match_rule": "CommandContext", "description": "Command injection may occur", "file_path": "./test\\go-vulns\\command_injection\\commandContext.go", "language": "go", "severity": "critical", "ptype": "vuln", "confidence": 0.3}, {"context": "    32   \tctx, cancel := context.WithTimeout(context.Background(), 100*time.Millisecond)\n    33   \tdefer cancel()\n    34   \n--> 35   \tif err := exec.CommandContext(ctx, text1, text2).Run(); err != nil {\n    36   \t\t// This will fail after 100 milliseconds. The 5 second sleep\n    37   \t\t// will be interrupted.\n    38   \t}\n    39   }", "match_type": "ast", "match_rule": "CommandContext", "description": "Command injection may occur", "file_path": "./test\\go-vulns\\command_injection\\commandContext.go", "language": "go", "severity": "critical", "ptype": "vuln", "confidence": 0.3}, {"context": "    27   \tdefer cancel() // The cancel should be deferred so resources are cleaned up\n    28   \n    29   \t// Create the command with our context\n--> 30   \tcmd := exec.CommandContext(ctx, \"ping\", \"-c 4\", \"-i 1\", \"8.8.8.8\")\n    31   \n    32   \t// This time we can simply use Output() to get the result.\n    33   \tout, err := cmd.Output()\n    34   ", "match_type": "ast", "match_rule": "CommandContext", "description": "Command injection may occur", "file_path": "./test\\go-vulns\\command_injection\\command_context_injection_safe.go", "language": "go", "severity": "critical", "ptype": "vuln", "confidence": 0.3}, {"context": "    27   \tdefer cancel() // The cancel should be deferred so resources are cleaned up\n    28   \n    29   \t// Create the command with our context\n--> 30   \tcmd := exec.CommandContext(ctx, \"ping\", \"-c 4\", \"-i 1\", \"8.8.8.8\")\n    31   \n    32   \t// This time we can simply use Output() to get the result.\n    33   \tout, err := cmd.Output()\n    34   ", "match_type": "ast", "match_rule": "CommandContext", "description": "Command injection may occur", "file_path": "./test\\go-vulns\\command_injection\\command_context_injection_safe.go", "language": "go", "severity": "critical", "ptype": "vuln", "confidence": 0.3}, {"context": "    27   \tdefer cancel() // The cancel should be deferred so resources are cleaned up\n    28   \n    29   \t// Create the command with our context\n--> 30   \tcmd := exec.CommandContext(ctx, \"ping\", \"-c 4\", \"-i 1\", \"8.8.8.8\")\n    31   \n    32   \t// This time we can simply use Output() to get the result.\n    33   \tout, err := cmd.Output()\n    34   ", "match_type": "ast", "match_rule": "CommandContext", "description": "Command injection may occur", "file_path": "./test\\go-vulns\\command_injection\\command_context_injection_safe.go", "language": "go", "severity": "critical", "ptype": "vuln", "confidence": 0.3}, {"context": "    29   \tkeys := r.URL.Query()[\"key\"]\n    30   \tuser_input := keys[0]\n    31   \n--> 32   \tos.Open(temp8(user_input))\n    33   }\n    34   \n    35   func temp8(str string) string {\n    36   \treturn str", "match_type": "regex", "match_rule": "(os)\\.(Create|Open|OpenFile)", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\path_traversal\\gosecFalsePositive1.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.4}, {"context": "    25   )\n    26   \n    27   func DirTraversal1(filename string, folderPath string) {\n--> 28   \tos.Create(folderPath + filename)\n    29   \tos.Open(folderPath + filename)\n    30   \tos.OpenFile(folderPath+filename, os.O_RDONLY, 0775)\n    31   \tioutil.ReadFile(folderPath + filename)\n    32   \tioutil.WriteFile(folderPath+filename, []byte(\"Hello, Gophers!\"), 0775)", "match_type": "regex", "match_rule": "(os)\\.(Create|Open|OpenFile)", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\path_traversal\\path1.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.4}, {"context": "    26   \n    27   func DirTraversal1(filename string, folderPath string) {\n    28   \tos.Create(folderPath + filename)\n--> 29   \tos.Open(folderPath + filename)\n    30   \tos.OpenFile(folderPath+filename, os.O_RDONLY, 0775)\n    31   \tioutil.ReadFile(folderPath + filename)\n    32   \tioutil.WriteFile(folderPath+filename, []byte(\"Hello, Gophers!\"), 0775)\n    33   \tpath.Join(folderPath, filename)", "match_type": "regex", "match_rule": "(os)\\.(Create|Open|OpenFile)", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\path_traversal\\path1.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.4}, {"context": "    27   func DirTraversal1(filename string, folderPath string) {\n    28   \tos.Create(folderPath + filename)\n    29   \tos.Open(folderPath + filename)\n--> 30   \tos.OpenFile(folderPath+filename, os.O_RDONLY, 0775)\n    31   \tioutil.ReadFile(folderPath + filename)\n    32   \tioutil.WriteFile(folderPath+filename, []byte(\"Hello, Gophers!\"), 0775)\n    33   \tpath.Join(folderPath, filename)\n    34   \tfilepath.Join(folderPath, filename)", "match_type": "regex", "match_rule": "(os)\\.(Create|Open|OpenFile)", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\path_traversal\\path1.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.4}, {"context": "    28   \tos.Create(folderPath + filename)\n    29   \tos.Open(folderPath + filename)\n    30   \tos.OpenFile(folderPath+filename, os.O_RDONLY, 0775)\n--> 31   \tioutil.ReadFile(folderPath + filename)\n    32   \tioutil.WriteFile(folderPath+filename, []byte(\"Hello, Gophers!\"), 0775)\n    33   \tpath.Join(folderPath, filename)\n    34   \tfilepath.Join(folderPath, filename)\n    35   }", "match_type": "regex", "match_rule": "(io|ioutil)\\.(ReadFile|WriteFile)", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\path_traversal\\path1.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.4}, {"context": "    29   \tos.Open(folderPath + filename)\n    30   \tos.OpenFile(folderPath+filename, os.O_RDONLY, 0775)\n    31   \tioutil.ReadFile(folderPath + filename)\n--> 32   \tioutil.WriteFile(folderPath+filename, []byte(\"Hello, Gophers!\"), 0775)\n    33   \tpath.Join(folderPath, filename)\n    34   \tfilepath.Join(folderPath, filename)\n    35   }\n    36   ", "match_type": "regex", "match_rule": "(io|ioutil)\\.(ReadFile|WriteFile)", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\path_traversal\\path1.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.4}, {"context": "    28   \tos.Create(folderPath + filename)\n    29   \tos.Open(folderPath + filename)\n    30   \tos.OpenFile(folderPath+filename, os.O_RDONLY, 0775)\n--> 31   \tioutil.ReadFile(folderPath + filename)\n    32   \tioutil.WriteFile(folderPath+filename, []byte(\"Hello, Gophers!\"), 0775)\n    33   \tpath.Join(folderPath, filename)\n    34   \tfilepath.Join(folderPath, filename)\n    35   }", "match_type": "ast", "match_rule": "ReadFile", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\path_traversal\\path1.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.2}, {"context": "    29   \tos.Open(folderPath + filename)\n    30   \tos.OpenFile(folderPath+filename, os.O_RDONLY, 0775)\n    31   \tioutil.ReadFile(folderPath + filename)\n--> 32   \tioutil.WriteFile(folderPath+filename, []byte(\"Hello, Gophers!\"), 0775)\n    33   \tpath.Join(folderPath, filename)\n    34   \tfilepath.Join(folderPath, filename)\n    35   }\n    36   ", "match_type": "ast", "match_rule": "WriteFile", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\path_traversal\\path1.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.2}, {"context": "    28   \tos.Create(folderPath + filename)\n    29   \tos.Open(folderPath + filename)\n    30   \tos.OpenFile(folderPath+filename, os.O_RDONLY, 0775)\n--> 31   \tioutil.ReadFile(folderPath + filename)\n    32   \tioutil.WriteFile(folderPath+filename, []byte(\"Hello, Gophers!\"), 0775)\n    33   \tpath.Join(folderPath, filename)\n    34   \tfilepath.Join(folderPath, filename)\n    35   }", "match_type": "ast", "match_rule": "ReadFile", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\path_traversal\\path1.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.2}, {"context": "    29   \tos.Open(folderPath + filename)\n    30   \tos.OpenFile(folderPath+filename, os.O_RDONLY, 0775)\n    31   \tioutil.ReadFile(folderPath + filename)\n--> 32   \tioutil.WriteFile(folderPath+filename, []byte(\"Hello, Gophers!\"), 0775)\n    33   \tpath.Join(folderPath, filename)\n    34   \tfilepath.Join(folderPath, filename)\n    35   }\n    36   ", "match_type": "ast", "match_rule": "WriteFile", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\path_traversal\\path1.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.2}, {"context": "    27   \n    28   func DirTraversal2(filename string) string {\n    29   \tfolderPath := \"./list1/images/\"\n--> 30   \t// f, _ := os.Create(folderPath + filename + getVuln())\n    31   \tf, _ := os.Create(folderPath + getVuln())\n    32   \tf.Close()\n    33   \treturn folderPath\n    34   }", "match_type": "regex", "match_rule": "(os)\\.(Create|Open|OpenFile)", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\path_traversal\\path2.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.4}, {"context": "    28   func DirTraversal2(filename string) string {\n    29   \tfolderPath := \"./list1/images/\"\n    30   \t// f, _ := os.Create(folderPath + filename + getVuln())\n--> 31   \tf, _ := os.Create(folderPath + getVuln())\n    32   \tf.Close()\n    33   \treturn folderPath\n    34   }\n    35   ", "match_type": "regex", "match_rule": "(os)\\.(Create|Open|OpenFile)", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\path_traversal\\path2.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.4}, {"context": "    24   \n    25   func DirTraversal3() {\n    26   \tfolderPath := \"./list1/images/\"\n--> 27   \tf, _ := os.Create(folderPath + getFile1())\n    28   \tf.Close()\n    29   }\n    30   ", "match_type": "regex", "match_rule": "(os)\\.(Create|Open|OpenFile)", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\path_traversal\\path3.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.4}, {"context": "    25   func DirTraversal4() {\n    26   \tsafe := \"hello\"\n    27   \tfolderPath := \"./list1/images/\"\n--> 28   \tf, _ := os.Create(folderPath + getFile2(safe))\n    29   \tf.Close()\n    30   }\n    31   ", "match_type": "regex", "match_rule": "(os)\\.(Create|Open|OpenFile)", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\path_traversal\\path4.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.4}, {"context": "    26   }\n    27   \n    28   func DirTraversal5(folderPath string) {\n--> 29   \tf, _ := os.Create(folderPath + \"test\")\n    30   \tf.Close()\n    31   }\n    32   ", "match_type": "regex", "match_rule": "(os)\\.(Create|Open|OpenFile)", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\path_traversal\\pathBin.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.4}, {"context": "    31   }\n    32   \n    33   func DirTraversal6(folderPath string) {\n--> 34   \tf, _ := os.Create(folderPath)\n    35   \tf.Close()\n    36   }\n    37   ", "match_type": "regex", "match_rule": "(os)\\.(Create|Open|OpenFile)", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\path_traversal\\pathBinPhi.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.4}, {"context": "    27   }\n    28   \n    29   func DirTraversal8(folderPath string, path2 string) {\n--> 30   \tf, _ := os.Create(folderPath + path2 + \"so\" + \"many\" + \"params!\")\n    31   \tf.Close()\n    32   }\n    33   ", "match_type": "regex", "match_rule": "(os)\\.(Create|Open|OpenFile)", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\path_traversal\\pathMultParams.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.4}, {"context": "    27   func DirTraversalPhi() {\n    28   \tsafe := \"hello\"\n    29   \tfolderPath := \"./list1/images/\"\n--> 30   \tf, _ := os.Create(folderPath + getFilePhi(safe))\n    31   \tf.Close()\n    32   }\n    33   ", "match_type": "regex", "match_rule": "(os)\\.(Create|Open|OpenFile)", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\path_traversal\\pathPhi.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.4}, {"context": "    27   }\n    28   \n    29   func DirTraversal7(folderPath string) {\n--> 30   \tf, _ := os.Create(folderPath)\n    31   \tf.Close()\n    32   }\n    33   ", "match_type": "regex", "match_rule": "(os)\\.(Create|Open|OpenFile)", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\path_traversal\\pathReg.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.4}, {"context": "    25   \thiddenMessage := \"constt\"\n    26   \ttester := hiddenMessage\n    27   \ta := &tester\n--> 28   \tos.Open(*a)\n    29   }\n    30   \n    31   func unop_vuln() {\n    32   \treader := bufio.NewReader(os.Stdin)", "match_type": "regex", "match_rule": "(os)\\.(Create|Open|OpenFile)", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\path_traversal\\unop_test.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.4}, {"context": "    33   \thiddenMessage, _ := reader.ReadString('\\n')\n    34   \ttester := hiddenMessage\n    35   \ta := &tester\n--> 36   \tos.Open(*a)\n    37   }\n    38   ", "match_type": "regex", "match_rule": "(os)\\.(Create|Open|OpenFile)", "description": "Path injection may occur", "file_path": "./test\\go-vulns\\path_traversal\\unop_test.go", "language": "go", "severity": "low", "ptype": "danger", "confidence": 0.4}, {"context": "    26           String sql = \"select * from card where id = ?\";\n    27           PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    28           preparedStatement.setString(1, id);\n--> 29           ResultSet resultSet = preparedStatement.executeQuery();\n    30           Card card = new Card();\n    31           if (resultSet.next()) {\n    32               card.setId(resultSet.getString(\"id\"));\n    33               card.setName(resultSet.getString(\"name\"));\n    34               card.setClassName(resultSet.getString(\"class_name\"));", "match_type": "ast", "match_rule": "executeQuery", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    26           String sql = \"select * from card where id = ?\";\n    27           PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    28           preparedStatement.setString(1, id);\n--> 29           ResultSet resultSet = preparedStatement.executeQuery();\n    30           Card card = new Card();\n    31           if (resultSet.next()) {\n    32               card.setId(resultSet.getString(\"id\"));\n    33               card.setName(resultSet.getString(\"name\"));\n    34               card.setClassName(resultSet.getString(\"class_name\"));", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    52           preparedStatement.setString(3, card.getClassName());\n    53           preparedStatement.setString(4, card.getPassword());\n    54   \n--> 55           preparedStatement.execute();\n    56       }\n    57   \n    58       // 更新\n    59       public static void updateCard(Card card) throws SQLException {\n    60           System.out.println(\"请重新输入个人信息：\");", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    79           preparedStatement.setString(5, oldId);\n    80   \n    81           System.out.println(preparedStatement.toString()); // 打印执行的sql语句\n--> 82           preparedStatement.execute();\n    83       }\n    84   \n    85       // 删除\n    86       public static void delete(Card card) throws SQLException {\n    87           String sql = \"delete from card where id = ?\";", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    87           String sql = \"delete from card where id = ?\";\n    88           PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    89           preparedStatement.setString(1, card.getId());\n--> 90           preparedStatement.execute();\n    91       }\n    92   \n    93       // 充值\n    94       public static double recharge(Card card, Integer plusMoney) throws SQLException {\n    95           if (card.getNumOfBankCard() < plusMoney) {", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    104               preparedStatement.setDouble(2, card.getNumOfBankCard());\n    105               preparedStatement.setString(3, card.getId());\n    106               System.out.println(preparedStatement.toString());\n--> 107               preparedStatement.execute();\n    108               System.out.println(\"充值成功，您饭卡上的余额为：\" + card.getMoney());\n    109           }\n    110           return card.getMoney();\n    111       }\n    112   ", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    121               PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    122               preparedStatement.setDouble(1, card.getMoney());\n    123               preparedStatement.setString(2, card.getId());\n--> 124               preparedStatement.execute();\n    125   \n    126               System.out.println(\"你已消费\" + cost + \"元,卡上余额为\" + card.getMoney());\n    127           }\n    128       }\n    129   ", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    26           String sql = \"select * from card where id = ?\";\n    27           PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    28           preparedStatement.setString(1, id);\n--> 29           ResultSet resultSet = preparedStatement.executeQuery();\n    30           Card card = new Card();\n    31           if (resultSet.next()) {\n    32               card.setId(resultSet.getString(\"id\"));\n    33               card.setName(resultSet.getString(\"name\"));\n    34               card.setClassName(resultSet.getString(\"class_name\"));", "match_type": "ast", "match_rule": ".execute", "description": "ssrf可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    52           preparedStatement.setString(3, card.getClassName());\n    53           preparedStatement.setString(4, card.getPassword());\n    54   \n--> 55           preparedStatement.execute();\n    56       }\n    57   \n    58       // 更新\n    59       public static void updateCard(Card card) throws SQLException {\n    60           System.out.println(\"请重新输入个人信息：\");", "match_type": "ast", "match_rule": ".execute", "description": "ssrf可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    79           preparedStatement.setString(5, oldId);\n    80   \n    81           System.out.println(preparedStatement.toString()); // 打印执行的sql语句\n--> 82           preparedStatement.execute();\n    83       }\n    84   \n    85       // 删除\n    86       public static void delete(Card card) throws SQLException {\n    87           String sql = \"delete from card where id = ?\";", "match_type": "ast", "match_rule": ".execute", "description": "ssrf可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    87           String sql = \"delete from card where id = ?\";\n    88           PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    89           preparedStatement.setString(1, card.getId());\n--> 90           preparedStatement.execute();\n    91       }\n    92   \n    93       // 充值\n    94       public static double recharge(Card card, Integer plusMoney) throws SQLException {\n    95           if (card.getNumOfBankCard() < plusMoney) {", "match_type": "ast", "match_rule": ".execute", "description": "ssrf可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    104               preparedStatement.setDouble(2, card.getNumOfBankCard());\n    105               preparedStatement.setString(3, card.getId());\n    106               System.out.println(preparedStatement.toString());\n--> 107               preparedStatement.execute();\n    108               System.out.println(\"充值成功，您饭卡上的余额为：\" + card.getMoney());\n    109           }\n    110           return card.getMoney();\n    111       }\n    112   ", "match_type": "ast", "match_rule": ".execute", "description": "ssrf可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    121               PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    122               preparedStatement.setDouble(1, card.getMoney());\n    123               preparedStatement.setString(2, card.getId());\n--> 124               preparedStatement.execute();\n    125   \n    126               System.out.println(\"你已消费\" + cost + \"元,卡上余额为\" + card.getMoney());\n    127           }\n    128       }\n    129   ", "match_type": "ast", "match_rule": ".execute", "description": "ssrf可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    26           String sql = \"select * from card where id = ?\";\n    27           PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    28           preparedStatement.setString(1, id);\n--> 29           ResultSet resultSet = preparedStatement.executeQuery();\n    30           Card card = new Card();\n    31           if (resultSet.next()) {\n    32               card.setId(resultSet.getString(\"id\"));\n    33               card.setName(resultSet.getString(\"name\"));\n    34               card.setClassName(resultSet.getString(\"class_name\"));", "match_type": "ast", "match_rule": "executeQuery", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    26           String sql = \"select * from card where id = ?\";\n    27           PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    28           preparedStatement.setString(1, id);\n--> 29           ResultSet resultSet = preparedStatement.executeQuery();\n    30           Card card = new Card();\n    31           if (resultSet.next()) {\n    32               card.setId(resultSet.getString(\"id\"));\n    33               card.setName(resultSet.getString(\"name\"));\n    34               card.setClassName(resultSet.getString(\"class_name\"));", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    52           preparedStatement.setString(3, card.getClassName());\n    53           preparedStatement.setString(4, card.getPassword());\n    54   \n--> 55           preparedStatement.execute();\n    56       }\n    57   \n    58       // 更新\n    59       public static void updateCard(Card card) throws SQLException {\n    60           System.out.println(\"请重新输入个人信息：\");", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    79           preparedStatement.setString(5, oldId);\n    80   \n    81           System.out.println(preparedStatement.toString()); // 打印执行的sql语句\n--> 82           preparedStatement.execute();\n    83       }\n    84   \n    85       // 删除\n    86       public static void delete(Card card) throws SQLException {\n    87           String sql = \"delete from card where id = ?\";", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    87           String sql = \"delete from card where id = ?\";\n    88           PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    89           preparedStatement.setString(1, card.getId());\n--> 90           preparedStatement.execute();\n    91       }\n    92   \n    93       // 充值\n    94       public static double recharge(Card card, Integer plusMoney) throws SQLException {\n    95           if (card.getNumOfBankCard() < plusMoney) {", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    104               preparedStatement.setDouble(2, card.getNumOfBankCard());\n    105               preparedStatement.setString(3, card.getId());\n    106               System.out.println(preparedStatement.toString());\n--> 107               preparedStatement.execute();\n    108               System.out.println(\"充值成功，您饭卡上的余额为：\" + card.getMoney());\n    109           }\n    110           return card.getMoney();\n    111       }\n    112   ", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    121               PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    122               preparedStatement.setDouble(1, card.getMoney());\n    123               preparedStatement.setString(2, card.getId());\n--> 124               preparedStatement.execute();\n    125   \n    126               System.out.println(\"你已消费\" + cost + \"元,卡上余额为\" + card.getMoney());\n    127           }\n    128       }\n    129   ", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    30           preparedStatement.setString(7, goddess.getCreateUser());\n    31           preparedStatement.setString(8, goddess.getUpdateUser());\n    32           preparedStatement.setInt(9, goddess.getIsdel());\n--> 33           preparedStatement.execute();\n    34       }\n    35   \n    36       public void updateGoddess(Goddess goddess) throws Exception {\n    37           Connection connection = DBUtil.getConnection();\n    38           String sql = \"update goddess set user_name = ?,sex = ?,age = ?,birthday = ?,email = ?,mobile = ?,create_date = current_date(),update_user = ?,update_date = current_date(),isdel = ? where id = ?\";", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    47           preparedStatement.setString(7, goddess.getUpdateUser());\n    48           preparedStatement.setInt(8, goddess.getIsdel());\n    49           preparedStatement.setInt(9, goddess.getId());\n--> 50           preparedStatement.execute();\n    51       }\n    52   \n    53       public void delGoddess(Integer id) throws Exception {\n    54           Connection connection = DBUtil.getConnection();\n    55           String sql = \"delete from goddess where id = ?\";", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    56           PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    57   \n    58           preparedStatement.setInt(1, id);\n--> 59           preparedStatement.execute();\n    60       }\n    61   \n    62       public List<Goddess> query() throws Exception {\n    63           Connection connection = DBUtil.getConnection();\n    64           Statement statement = connection.createStatement();", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    62       public List<Goddess> query() throws Exception {\n    63           Connection connection = DBUtil.getConnection();\n    64           Statement statement = connection.createStatement();\n--> 65           ResultSet resultSet = statement.executeQuery(\"select id,user_name,age from goddess\");\n    66   \n    67           List<Goddess> gs = new ArrayList<Goddess>();\n    68           Goddess g = null;\n    69           while (resultSet.next()) {\n    70               g = new Goddess();", "match_type": "ast", "match_rule": "executeQuery", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    84           PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    85   \n    86           preparedStatement.setInt(1, id);\n--> 87           ResultSet resultSet = preparedStatement.executeQuery();\n    88           while (resultSet.next()) {\n    89               goddess = new Goddess();\n    90               goddess.setId(resultSet.getInt(\"id\"));\n    91               goddess.setUserName(resultSet.getString(\"user_name\"));\n    92               goddess.setAge(resultSet.getInt(\"age\"));", "match_type": "ast", "match_rule": "executeQuery", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    84           PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    85   \n    86           preparedStatement.setInt(1, id);\n--> 87           ResultSet resultSet = preparedStatement.executeQuery();\n    88           while (resultSet.next()) {\n    89               goddess = new Goddess();\n    90               goddess.setId(resultSet.getInt(\"id\"));\n    91               goddess.setUserName(resultSet.getString(\"user_name\"));\n    92               goddess.setAge(resultSet.getInt(\"age\"));", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    118           preparedStatement.setString(3, \"%\" + email + \"%\");\n    119   \n    120           System.out.println(preparedStatement.toString());\n--> 121           ResultSet resultSet = preparedStatement.executeQuery();\n    122   \n    123           Goddess goddess = null;\n    124           while (resultSet.next()) {\n    125               goddess = new Goddess();\n    126               goddess = new Goddess();", "match_type": "ast", "match_rule": "executeQuery", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    118           preparedStatement.setString(3, \"%\" + email + \"%\");\n    119   \n    120           System.out.println(preparedStatement.toString());\n--> 121           ResultSet resultSet = preparedStatement.executeQuery();\n    122   \n    123           Goddess goddess = null;\n    124           while (resultSet.next()) {\n    125               goddess = new Goddess();\n    126               goddess = new Goddess();", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    159           PreparedStatement preparedStatement = connection.prepareStatement(stringBuilder.toString());\n    160   \n    161           System.out.println(preparedStatement.toString());\n--> 162           ResultSet resultSet = preparedStatement.executeQuery();\n    163   \n    164           Goddess goddess = null;\n    165           while (resultSet.next()) {\n    166               goddess = new Goddess();\n    167               goddess = new Goddess();", "match_type": "ast", "match_rule": "executeQuery", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    159           PreparedStatement preparedStatement = connection.prepareStatement(stringBuilder.toString());\n    160   \n    161           System.out.println(preparedStatement.toString());\n--> 162           ResultSet resultSet = preparedStatement.executeQuery();\n    163   \n    164           Goddess goddess = null;\n    165           while (resultSet.next()) {\n    166               goddess = new Goddess();\n    167               goddess = new Goddess();", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    30           preparedStatement.setString(7, goddess.getCreateUser());\n    31           preparedStatement.setString(8, goddess.getUpdateUser());\n    32           preparedStatement.setInt(9, goddess.getIsdel());\n--> 33           preparedStatement.execute();\n    34       }\n    35   \n    36       public void updateGoddess(Goddess goddess) throws Exception {\n    37           Connection connection = DBUtil.getConnection();\n    38           String sql = \"update goddess set user_name = ?,sex = ?,age = ?,birthday = ?,email = ?,mobile = ?,create_date = current_date(),update_user = ?,update_date = current_date(),isdel = ? where id = ?\";", "match_type": "ast", "match_rule": ".execute", "description": "ssrf可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    47           preparedStatement.setString(7, goddess.getUpdateUser());\n    48           preparedStatement.setInt(8, goddess.getIsdel());\n    49           preparedStatement.setInt(9, goddess.getId());\n--> 50           preparedStatement.execute();\n    51       }\n    52   \n    53       public void delGoddess(Integer id) throws Exception {\n    54           Connection connection = DBUtil.getConnection();\n    55           String sql = \"delete from goddess where id = ?\";", "match_type": "ast", "match_rule": ".execute", "description": "ssrf可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    56           PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    57   \n    58           preparedStatement.setInt(1, id);\n--> 59           preparedStatement.execute();\n    60       }\n    61   \n    62       public List<Goddess> query() throws Exception {\n    63           Connection connection = DBUtil.getConnection();\n    64           Statement statement = connection.createStatement();", "match_type": "ast", "match_rule": ".execute", "description": "ssrf可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    62       public List<Goddess> query() throws Exception {\n    63           Connection connection = DBUtil.getConnection();\n    64           Statement statement = connection.createStatement();\n--> 65           ResultSet resultSet = statement.executeQuery(\"select id,user_name,age from goddess\");\n    66   \n    67           List<Goddess> gs = new ArrayList<Goddess>();\n    68           Goddess g = null;\n    69           while (resultSet.next()) {\n    70               g = new Goddess();", "match_type": "ast", "match_rule": ".execute", "description": "ssrf可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    84           PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    85   \n    86           preparedStatement.setInt(1, id);\n--> 87           ResultSet resultSet = preparedStatement.executeQuery();\n    88           while (resultSet.next()) {\n    89               goddess = new Goddess();\n    90               goddess.setId(resultSet.getInt(\"id\"));\n    91               goddess.setUserName(resultSet.getString(\"user_name\"));\n    92               goddess.setAge(resultSet.getInt(\"age\"));", "match_type": "ast", "match_rule": ".execute", "description": "ssrf可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    118           preparedStatement.setString(3, \"%\" + email + \"%\");\n    119   \n    120           System.out.println(preparedStatement.toString());\n--> 121           ResultSet resultSet = preparedStatement.executeQuery();\n    122   \n    123           Goddess goddess = null;\n    124           while (resultSet.next()) {\n    125               goddess = new Goddess();\n    126               goddess = new Goddess();", "match_type": "ast", "match_rule": ".execute", "description": "ssrf可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    159           PreparedStatement preparedStatement = connection.prepareStatement(stringBuilder.toString());\n    160   \n    161           System.out.println(preparedStatement.toString());\n--> 162           ResultSet resultSet = preparedStatement.executeQuery();\n    163   \n    164           Goddess goddess = null;\n    165           while (resultSet.next()) {\n    166               goddess = new Goddess();\n    167               goddess = new Goddess();", "match_type": "ast", "match_rule": ".execute", "description": "ssrf可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    30           preparedStatement.setString(7, goddess.getCreateUser());\n    31           preparedStatement.setString(8, goddess.getUpdateUser());\n    32           preparedStatement.setInt(9, goddess.getIsdel());\n--> 33           preparedStatement.execute();\n    34       }\n    35   \n    36       public void updateGoddess(Goddess goddess) throws Exception {\n    37           Connection connection = DBUtil.getConnection();\n    38           String sql = \"update goddess set user_name = ?,sex = ?,age = ?,birthday = ?,email = ?,mobile = ?,create_date = current_date(),update_user = ?,update_date = current_date(),isdel = ? where id = ?\";", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    47           preparedStatement.setString(7, goddess.getUpdateUser());\n    48           preparedStatement.setInt(8, goddess.getIsdel());\n    49           preparedStatement.setInt(9, goddess.getId());\n--> 50           preparedStatement.execute();\n    51       }\n    52   \n    53       public void delGoddess(Integer id) throws Exception {\n    54           Connection connection = DBUtil.getConnection();\n    55           String sql = \"delete from goddess where id = ?\";", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    56           PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    57   \n    58           preparedStatement.setInt(1, id);\n--> 59           preparedStatement.execute();\n    60       }\n    61   \n    62       public List<Goddess> query() throws Exception {\n    63           Connection connection = DBUtil.getConnection();\n    64           Statement statement = connection.createStatement();", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    62       public List<Goddess> query() throws Exception {\n    63           Connection connection = DBUtil.getConnection();\n    64           Statement statement = connection.createStatement();\n--> 65           ResultSet resultSet = statement.executeQuery(\"select id,user_name,age from goddess\");\n    66   \n    67           List<Goddess> gs = new ArrayList<Goddess>();\n    68           Goddess g = null;\n    69           while (resultSet.next()) {\n    70               g = new Goddess();", "match_type": "ast", "match_rule": "executeQuery", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    84           PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    85   \n    86           preparedStatement.setInt(1, id);\n--> 87           ResultSet resultSet = preparedStatement.executeQuery();\n    88           while (resultSet.next()) {\n    89               goddess = new Goddess();\n    90               goddess.setId(resultSet.getInt(\"id\"));\n    91               goddess.setUserName(resultSet.getString(\"user_name\"));\n    92               goddess.setAge(resultSet.getInt(\"age\"));", "match_type": "ast", "match_rule": "executeQuery", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    84           PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    85   \n    86           preparedStatement.setInt(1, id);\n--> 87           ResultSet resultSet = preparedStatement.executeQuery();\n    88           while (resultSet.next()) {\n    89               goddess = new Goddess();\n    90               goddess.setId(resultSet.getInt(\"id\"));\n    91               goddess.setUserName(resultSet.getString(\"user_name\"));\n    92               goddess.setAge(resultSet.getInt(\"age\"));", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    118           preparedStatement.setString(3, \"%\" + email + \"%\");\n    119   \n    120           System.out.println(preparedStatement.toString());\n--> 121           ResultSet resultSet = preparedStatement.executeQuery();\n    122   \n    123           Goddess goddess = null;\n    124           while (resultSet.next()) {\n    125               goddess = new Goddess();\n    126               goddess = new Goddess();", "match_type": "ast", "match_rule": "executeQuery", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    118           preparedStatement.setString(3, \"%\" + email + \"%\");\n    119   \n    120           System.out.println(preparedStatement.toString());\n--> 121           ResultSet resultSet = preparedStatement.executeQuery();\n    122   \n    123           Goddess goddess = null;\n    124           while (resultSet.next()) {\n    125               goddess = new Goddess();\n    126               goddess = new Goddess();", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    159           PreparedStatement preparedStatement = connection.prepareStatement(stringBuilder.toString());\n    160   \n    161           System.out.println(preparedStatement.toString());\n--> 162           ResultSet resultSet = preparedStatement.executeQuery();\n    163   \n    164           Goddess goddess = null;\n    165           while (resultSet.next()) {\n    166               goddess = new Goddess();\n    167               goddess = new Goddess();", "match_type": "ast", "match_rule": "executeQuery", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    159           PreparedStatement preparedStatement = connection.prepareStatement(stringBuilder.toString());\n    160   \n    161           System.out.println(preparedStatement.toString());\n--> 162           ResultSet resultSet = preparedStatement.executeQuery();\n    163   \n    164           Goddess goddess = null;\n    165           while (resultSet.next()) {\n    166               goddess = new Goddess();\n    167               goddess = new Goddess();", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    35           Connection connection = DriverManager.getConnection(URL, USER, PASSWORD);\n    36           // 3.通过数据库的连接操作数据库，实现增删改查\n    37           Statement statement = connection.createStatement();\n--> 38           ResultSet resultSet = statement.executeQuery(\"select user_name,age from goddess\");\n    39   \n    40           while (resultSet.next()) {\n    41               System.out.println(resultSet.getString(\"user_name\")+ \",\" + resultSet.getInt(\"age\"));\n    42           }\n    43       }", "match_type": "ast", "match_rule": "executeQuery", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\util\\DBUtil.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    35           Connection connection = DriverManager.getConnection(URL, USER, PASSWORD);\n    36           // 3.通过数据库的连接操作数据库，实现增删改查\n    37           Statement statement = connection.createStatement();\n--> 38           ResultSet resultSet = statement.executeQuery(\"select user_name,age from goddess\");\n    39   \n    40           while (resultSet.next()) {\n    41               System.out.println(resultSet.getString(\"user_name\")+ \",\" + resultSet.getInt(\"age\"));\n    42           }\n    43       }", "match_type": "ast", "match_rule": ".execute", "description": "ssrf可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\util\\DBUtil.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    35           Connection connection = DriverManager.getConnection(URL, USER, PASSWORD);\n    36           // 3.通过数据库的连接操作数据库，实现增删改查\n    37           Statement statement = connection.createStatement();\n--> 38           ResultSet resultSet = statement.executeQuery(\"select user_name,age from goddess\");\n    39   \n    40           while (resultSet.next()) {\n    41               System.out.println(resultSet.getString(\"user_name\")+ \",\" + resultSet.getInt(\"age\"));\n    42           }\n    43       }", "match_type": "ast", "match_rule": "executeQuery", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\util\\DBUtil.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    44                                   ObjectInputStream input = new ObjectInputStream(socket.getInputStream());\n    45                                   try {\n    46                                       String methodName = input.readUTF();\n--> 47                                       Class<?>[] parameterTypes = (Class<?>[]) input.readObject();\n    48                                       Object[] arguments = (Object[]) input.readObject();//参数\n    49                                       ObjectOutputStream output = new ObjectOutputStream(socket.getOutputStream());\n    50                                       try {\n    51                                           Method method = service.getClass().getMethod(methodName, parameterTypes);\n    52                                           Object result = method.invoke(service, arguments);", "match_type": "ast", "match_rule": "readObject", "description": "java原生反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\rpc-easy-demo\\src\\com\\acts\\rpc\\RpcFramework.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    45                                   try {\n    46                                       String methodName = input.readUTF();\n    47                                       Class<?>[] parameterTypes = (Class<?>[]) input.readObject();\n--> 48                                       Object[] arguments = (Object[]) input.readObject();//参数\n    49                                       ObjectOutputStream output = new ObjectOutputStream(socket.getOutputStream());\n    50                                       try {\n    51                                           Method method = service.getClass().getMethod(methodName, parameterTypes);\n    52                                           Object result = method.invoke(service, arguments);\n    53                                           output.writeObject(result);", "match_type": "ast", "match_rule": "readObject", "description": "java原生反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\rpc-easy-demo\\src\\com\\acts\\rpc\\RpcFramework.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    106                           output.writeObject(arguments);\n    107                           ObjectInputStream input = new ObjectInputStream(socket.getInputStream());\n    108                           try {\n--> 109                               Object result = input.readObject();\n    110                               if (result instanceof Throwable) {\n    111                                   throw (Throwable) result;\n    112                               }\n    113                               return result;\n    114                           } finally {", "match_type": "ast", "match_rule": "readObject", "description": "java原生反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\rpc-easy-demo\\src\\com\\acts\\rpc\\RpcFramework.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    44                                   ObjectInputStream input = new ObjectInputStream(socket.getInputStream());\n    45                                   try {\n    46                                       String methodName = input.readUTF();\n--> 47                                       Class<?>[] parameterTypes = (Class<?>[]) input.readObject();\n    48                                       Object[] arguments = (Object[]) input.readObject();//参数\n    49                                       ObjectOutputStream output = new ObjectOutputStream(socket.getOutputStream());\n    50                                       try {\n    51                                           Method method = service.getClass().getMethod(methodName, parameterTypes);\n    52                                           Object result = method.invoke(service, arguments);", "match_type": "ast", "match_rule": "readObject", "description": "java原生反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\rpc-easy-demo\\src\\com\\acts\\rpc\\RpcFramework.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    45                                   try {\n    46                                       String methodName = input.readUTF();\n    47                                       Class<?>[] parameterTypes = (Class<?>[]) input.readObject();\n--> 48                                       Object[] arguments = (Object[]) input.readObject();//参数\n    49                                       ObjectOutputStream output = new ObjectOutputStream(socket.getOutputStream());\n    50                                       try {\n    51                                           Method method = service.getClass().getMethod(methodName, parameterTypes);\n    52                                           Object result = method.invoke(service, arguments);\n    53                                           output.writeObject(result);", "match_type": "ast", "match_rule": "readObject", "description": "java原生反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\rpc-easy-demo\\src\\com\\acts\\rpc\\RpcFramework.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    106                           output.writeObject(arguments);\n    107                           ObjectInputStream input = new ObjectInputStream(socket.getInputStream());\n    108                           try {\n--> 109                               Object result = input.readObject();\n    110                               if (result instanceof Throwable) {\n    111                                   throw (Throwable) result;\n    112                               }\n    113                               return result;\n    114                           } finally {", "match_type": "ast", "match_rule": "readObject", "description": "java原生反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\rpc-easy-demo\\src\\com\\acts\\rpc\\RpcFramework.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    26               pstmt = conn.prepareStatement(sql);\n    27               pstmt.setString(1, file.getFname());\n    28               pstmt.setBytes(2, file.getFcontent());\n--> 29               pstmt.executeUpdate();\n    30           } catch (SQLException e) {\n    31               e.printStackTrace();\n    32           } finally {\n    33               DBUtil.clostAll(rs, pstmt, conn);\n    34           }", "match_type": "ast", "match_rule": ".execute", "description": "ssrf可能会出现", "file_path": "./test\\java-project-practice-master\\socket-study\\ScoketDemo\\src\\com\\imooc\\service\\FileService.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    26               pstmt = conn.prepareStatement(sql);\n    27               pstmt.setString(1, user.getUsername());\n    28               pstmt.setString(2, user.getPassword());\n--> 29               rs = pstmt.executeQuery();\n    30               if (rs.next()) {\n    31                   return true;\n    32               }\n    33           } catch (SQLException e) {\n    34               e.printStackTrace();", "match_type": "ast", "match_rule": "executeQuery", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\socket-study\\ScoketDemo\\src\\com\\imooc\\service\\UserService.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    26               pstmt = conn.prepareStatement(sql);\n    27               pstmt.setString(1, user.getUsername());\n    28               pstmt.setString(2, user.getPassword());\n--> 29               rs = pstmt.executeQuery();\n    30               if (rs.next()) {\n    31                   return true;\n    32               }\n    33           } catch (SQLException e) {\n    34               e.printStackTrace();", "match_type": "ast", "match_rule": ".execute", "description": "ssrf可能会出现", "file_path": "./test\\java-project-practice-master\\socket-study\\ScoketDemo\\src\\com\\imooc\\service\\UserService.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    46               pstmt = conn.prepareStatement(sql);\n    47               pstmt.setString(1, user.getUsername());\n    48               pstmt.setString(2, user.getPassword());\n--> 49               pstmt.executeUpdate();\n    50           } catch (SQLException e) {\n    51               e.printStackTrace();\n    52           }\n    53       }\n    54   }", "match_type": "ast", "match_rule": ".execute", "description": "ssrf可能会出现", "file_path": "./test\\java-project-practice-master\\socket-study\\ScoketDemo\\src\\com\\imooc\\service\\UserService.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    26               pstmt = conn.prepareStatement(sql);\n    27               pstmt.setString(1, user.getUsername());\n    28               pstmt.setString(2, user.getPassword());\n--> 29               rs = pstmt.executeQuery();\n    30               if (rs.next()) {\n    31                   return true;\n    32               }\n    33           } catch (SQLException e) {\n    34               e.printStackTrace();", "match_type": "ast", "match_rule": "executeQuery", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\socket-study\\ScoketDemo\\src\\com\\imooc\\service\\UserService.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    35               ois = new ObjectInputStream(socket.getInputStream());\n    36               oos = new ObjectOutputStream(socket.getOutputStream());\n    37               CommandTransfer transfer = (CommandTransfer) ois.readObject(); // 读取指令\n--> 38               execute(transfer);\n    39               oos.writeObject(transfer); //\n    40           } catch (IOException e) {\n    41               e.printStackTrace();\n    42           } catch (ClassNotFoundException e) {\n    43               e.printStackTrace();", "match_type": "ast", "match_rule": ".execute", "description": "ssrf可能会出现", "file_path": "./test\\java-project-practice-master\\socket-study\\ScoketDemo\\src\\com\\imooc\\socket\\ServerThread.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    34           try {\n    35               ois = new ObjectInputStream(socket.getInputStream());\n    36               oos = new ObjectOutputStream(socket.getOutputStream());\n--> 37               CommandTransfer transfer = (CommandTransfer) ois.readObject(); // 读取指令\n    38               execute(transfer);\n    39               oos.writeObject(transfer); //\n    40           } catch (IOException e) {\n    41               e.printStackTrace();\n    42           } catch (ClassNotFoundException e) {", "match_type": "ast", "match_rule": "readObject", "description": "java原生反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\socket-study\\ScoketDemo\\src\\com\\imooc\\socket\\ServerThread.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    34           try {\n    35               ois = new ObjectInputStream(socket.getInputStream());\n    36               oos = new ObjectOutputStream(socket.getOutputStream());\n--> 37               CommandTransfer transfer = (CommandTransfer) ois.readObject(); // 读取指令\n    38               execute(transfer);\n    39               oos.writeObject(transfer); //\n    40           } catch (IOException e) {\n    41               e.printStackTrace();\n    42           } catch (ClassNotFoundException e) {", "match_type": "ast", "match_rule": "readObject", "description": "java原生反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\socket-study\\ScoketDemo\\src\\com\\imooc\\socket\\ServerThread.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    172           CommandTransfer transfer = null;\n    173           try {\n    174               ois = new ObjectInputStream(socket.getInputStream());\n--> 175               transfer = (CommandTransfer) ois.readObject();\n    176           } catch (IOException e) {\n    177               e.printStackTrace();\n    178           } catch (ClassNotFoundException e) {\n    179               e.printStackTrace();\n    180           }", "match_type": "ast", "match_rule": "readObject", "description": "java原生反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\socket-study\\ScoketDemo\\src\\com\\imooc\\socket\\SocketClient.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    172           CommandTransfer transfer = null;\n    173           try {\n    174               ois = new ObjectInputStream(socket.getInputStream());\n--> 175               transfer = (CommandTransfer) ois.readObject();\n    176           } catch (IOException e) {\n    177               e.printStackTrace();\n    178           } catch (ClassNotFoundException e) {\n    179               e.printStackTrace();\n    180           }", "match_type": "ast", "match_rule": "readObject", "description": "java原生反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\socket-study\\ScoketDemo\\src\\com\\imooc\\socket\\SocketClient.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    38           Graph graph = null;\n    39   \n    40           try {\n--> 41                   GraphModel graphModel = workspace.getLookup().lookup(GraphModel.class);\n    42                   if (exportVisible) {\n    43                       graph = graphModel.getGraphVisible();\n    44                   } else {\n    45                       graph = graphModel.getGraph();\n    46                   }", "match_type": "ast", "match_rule": "lookup", "description": "rmi反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-gephi\\src\\main\\java\\com\\gaohanghang\\springbootgephi\\jsonexporter\\ExportJSON.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    95   \n    96       public String getJson() {\n    97           //Init a project - and therefore a workspace\n--> 98           ProjectController pc = Lookup.getDefault().lookup(ProjectController.class);\n    99           pc.newProject();\n    100           workspace = pc.getCurrentWorkspace();\n    101   \n    102           //Get controllers and models\n    103           ImportController importController = Lookup.getDefault().lookup(ImportController.class);", "match_type": "ast", "match_rule": "lookup", "description": "rmi反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-gephi\\src\\main\\java\\com\\gaohanghang\\springbootgephi\\service\\RelationshipService.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    100           workspace = pc.getCurrentWorkspace();\n    101   \n    102           //Get controllers and models\n--> 103           ImportController importController = Lookup.getDefault().lookup(ImportController.class);\n    104           GraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getGraphModel();\n    105   \n    106           //Import database\n    107           EdgeListDatabaseImpl db = new EdgeListDatabaseImpl();\n    108           db.setDBName(\"cobweb\");", "match_type": "ast", "match_rule": "lookup", "description": "rmi反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-gephi\\src\\main\\java\\com\\gaohanghang\\springbootgephi\\service\\RelationshipService.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    101   \n    102           //Get controllers and models\n    103           ImportController importController = Lookup.getDefault().lookup(ImportController.class);\n--> 104           GraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getGraphModel();\n    105   \n    106           //Import database\n    107           EdgeListDatabaseImpl db = new EdgeListDatabaseImpl();\n    108           db.setDBName(\"cobweb\");\n    109           db.setHost(\"10.0.0.156\");", "match_type": "ast", "match_rule": "lookup", "description": "rmi反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-gephi\\src\\main\\java\\com\\gaohanghang\\springbootgephi\\service\\RelationshipService.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    186   \n    187       public String getJsonTest() {\n    188           //Init a project - and therefore a workspace\n--> 189           ProjectController pc = Lookup.getDefault().lookup(ProjectController.class);\n    190           pc.newProject();\n    191           Workspace workspace = pc.getCurrentWorkspace();\n    192   \n    193           //Get controllers and models\n    194           ImportController importController = Lookup.getDefault().lookup(ImportController.class);", "match_type": "ast", "match_rule": "lookup", "description": "rmi反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-gephi\\src\\main\\java\\com\\gaohanghang\\springbootgephi\\service\\RelationshipService.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    191           Workspace workspace = pc.getCurrentWorkspace();\n    192   \n    193           //Get controllers and models\n--> 194           ImportController importController = Lookup.getDefault().lookup(ImportController.class);\n    195           GraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getGraphModel();\n    196   \n    197           //Import database\n    198           EdgeListDatabaseImpl db = new EdgeListDatabaseImpl();\n    199           db.setDBName(\"cobweb\");", "match_type": "ast", "match_rule": "lookup", "description": "rmi反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-gephi\\src\\main\\java\\com\\gaohanghang\\springbootgephi\\service\\RelationshipService.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    192   \n    193           //Get controllers and models\n    194           ImportController importController = Lookup.getDefault().lookup(ImportController.class);\n--> 195           GraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getGraphModel();\n    196   \n    197           //Import database\n    198           EdgeListDatabaseImpl db = new EdgeListDatabaseImpl();\n    199           db.setDBName(\"cobweb\");\n    200           db.setHost(\"10.0.0.156\");", "match_type": "ast", "match_rule": "lookup", "description": "rmi反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-gephi\\src\\main\\java\\com\\gaohanghang\\springbootgephi\\service\\RelationshipService.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    285           boolean exportVisible = false;\n    286   \n    287           try {\n--> 288               GraphModel graphModel = workspace.getLookup().lookup(GraphModel.class);\n    289               if (exportVisible) {\n    290                   graph = graphModel.getGraphVisible();\n    291               } else {\n    292                   graph = graphModel.getGraph();\n    293               }", "match_type": "ast", "match_rule": "lookup", "description": "rmi反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-gephi\\src\\main\\java\\com\\gaohanghang\\springbootgephi\\service\\RelationshipService.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    143               String query = \"UPDATE \" + \"nodes SET x = '\" + x + \"', y = '\" + y + \"' WHERE nodes.id='\" + id+\"'\";\n    144               try {\n    145                   Statement s = connection.createStatement();\n--> 146                   count += s.executeUpdate(query);\n    147                   s.close();\n    148   \n    149               } catch (SQLException e) {\n    150                   System.err.println(\"Failed to update line node id = \" + id);\n    151               }", "match_type": "ast", "match_rule": ".execute", "description": "ssrf可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-gephi\\src\\test\\java\\com\\gaohanghang\\springbootgephi\\HeadlessSimple2.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    68   \n    69       public void script() {\n    70           //Init a project - and therefore a workspace\n--> 71           ProjectController pc = Lookup.getDefault().lookup(ProjectController.class);\n    72           pc.newProject();\n    73           Workspace workspace = pc.getCurrentWorkspace();\n    74   \n    75           //Get controllers and models\n    76           ImportController importController = Lookup.getDefault().lookup(ImportController.class);", "match_type": "ast", "match_rule": "lookup", "description": "rmi反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-gephi\\src\\test\\java\\com\\gaohanghang\\springbootgephi\\HeadlessSimple2.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    73           Workspace workspace = pc.getCurrentWorkspace();\n    74   \n    75           //Get controllers and models\n--> 76           ImportController importController = Lookup.getDefault().lookup(ImportController.class);\n    77           GraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getGraphModel();\n    78   \n    79           //Import database\n    80           EdgeListDatabaseImpl db = new EdgeListDatabaseImpl();\n    81           db.setDBName(\"cobweb\");", "match_type": "ast", "match_rule": "lookup", "description": "rmi反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-gephi\\src\\test\\java\\com\\gaohanghang\\springbootgephi\\HeadlessSimple2.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    74   \n    75           //Get controllers and models\n    76           ImportController importController = Lookup.getDefault().lookup(ImportController.class);\n--> 77           GraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getGraphModel();\n    78   \n    79           //Import database\n    80           EdgeListDatabaseImpl db = new EdgeListDatabaseImpl();\n    81           db.setDBName(\"cobweb\");\n    82           db.setHost(\"10.0.0.156\");", "match_type": "ast", "match_rule": "lookup", "description": "rmi反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-gephi\\src\\test\\java\\com\\gaohanghang\\springbootgephi\\HeadlessSimple2.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    152           }\n    153           System.err.println(count + \" rows were updated\");\n    154   \n--> 155           ExportController ec = Lookup.getDefault().lookup(ExportController.class);\n    156           try {\n    157               ec.exportFile(new File(\"io_gexf.gexf\"));\n    158           } catch (IOException ex) {\n    159               ex.printStackTrace();\n    160               return;", "match_type": "ast", "match_rule": "lookup", "description": "rmi反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-gephi\\src\\test\\java\\com\\gaohanghang\\springbootgephi\\HeadlessSimple2.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    50       }\n    51   \n    52       private Query createNativeQuery(String sql, Object... params) {\n--> 53           Query nativeQuery = em.createNativeQuery(sql);\n    54           if (params != null && params.length > 0) {\n    55               for (int i = 0; i < params.length; i++) {\n    56                   nativeQuery.setParameter(i + 1, params[i]);  // 与Hiberante不同,jpa\n    57                                                                   // query从位置1开始\n    58               }", "match_type": "ast", "match_rule": "createNativeQuery", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-mail\\src\\main\\java\\com\\gaohanghang\\mail\\common\\Dynamicquery\\DynamicQueryImpl.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    63       @SuppressWarnings({\"unchecked\"})// 告诉编译器忽略 unchecked 警告信息，如使用List，ArrayList等未进行参数化产生的警告信息。\n    64       @Override\n    65       public <T> List<T> nativeQueryList(String nativeSql, Object... params) {\n--> 66           Query nativeQuery = createNativeQuery(nativeSql, params);\n    67           nativeQuery.unwrap(SQLQuery.class).setResultTransformer(Transformers.TO_LIST);\n    68           return nativeQuery.getResultList();\n    69       }\n    70   \n    71       @SuppressWarnings({ \"unchecked\"})", "match_type": "ast", "match_rule": "createNativeQuery", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-mail\\src\\main\\java\\com\\gaohanghang\\mail\\common\\Dynamicquery\\DynamicQueryImpl.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    71       @SuppressWarnings({ \"unchecked\"})\n    72       @Override\n    73       public <T> List<T> nativeQueryListMap(String nativeSql, Object... params) {\n--> 74           Query q = createNativeQuery(nativeSql, params);\n    75           q.unwrap(SQLQuery.class).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP);\n    76           return q.getResultList();\n    77       }\n    78   \n    79       @SuppressWarnings({ \"unchecked\"})", "match_type": "ast", "match_rule": "createNativeQuery", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-mail\\src\\main\\java\\com\\gaohanghang\\mail\\common\\Dynamicquery\\DynamicQueryImpl.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    79       @SuppressWarnings({ \"unchecked\"})\n    80       @Override\n    81       public <T> List<T> nativeQueryListModel(Class<T> resultClass, String nativeSql, Object... params) {\n--> 82           Query q = createNativeQuery(nativeSql, params);\n    83           q.unwrap(SQLQuery.class).setResultTransformer(Transformers.aliasToBean(resultClass));\n    84           return q.getResultList();\n    85       }\n    86   \n    87       @Override", "match_type": "ast", "match_rule": "createNativeQuery", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-mail\\src\\main\\java\\com\\gaohanghang\\mail\\common\\Dynamicquery\\DynamicQueryImpl.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    86   \n    87       @Override\n    88       public Long nativeQueryCount(String nativeSql, Object... params) {\n--> 89           Object count = createNativeQuery(nativeSql, params).getSingleResult();\n    90           return ((Number) count).longValue();\n    91       }\n    92   }\n    93   ", "match_type": "ast", "match_rule": "createNativeQuery", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-mail\\src\\main\\java\\com\\gaohanghang\\mail\\common\\Dynamicquery\\DynamicQueryImpl.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    50       }\n    51   \n    52       private Query createNativeQuery(String sql, Object... params) {\n--> 53           Query nativeQuery = em.createNativeQuery(sql);\n    54           if (params != null && params.length > 0) {\n    55               for (int i = 0; i < params.length; i++) {\n    56                   nativeQuery.setParameter(i + 1, params[i]);  // 与Hiberante不同,jpa\n    57                                                                   // query从位置1开始\n    58               }", "match_type": "ast", "match_rule": "createNativeQuery", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-mail\\src\\main\\java\\com\\gaohanghang\\mail\\common\\Dynamicquery\\DynamicQueryImpl.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    63       @SuppressWarnings({\"unchecked\"})// 告诉编译器忽略 unchecked 警告信息，如使用List，ArrayList等未进行参数化产生的警告信息。\n    64       @Override\n    65       public <T> List<T> nativeQueryList(String nativeSql, Object... params) {\n--> 66           Query nativeQuery = createNativeQuery(nativeSql, params);\n    67           nativeQuery.unwrap(SQLQuery.class).setResultTransformer(Transformers.TO_LIST);\n    68           return nativeQuery.getResultList();\n    69       }\n    70   \n    71       @SuppressWarnings({ \"unchecked\"})", "match_type": "ast", "match_rule": "createNativeQuery", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-mail\\src\\main\\java\\com\\gaohanghang\\mail\\common\\Dynamicquery\\DynamicQueryImpl.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    71       @SuppressWarnings({ \"unchecked\"})\n    72       @Override\n    73       public <T> List<T> nativeQueryListMap(String nativeSql, Object... params) {\n--> 74           Query q = createNativeQuery(nativeSql, params);\n    75           q.unwrap(SQLQuery.class).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP);\n    76           return q.getResultList();\n    77       }\n    78   \n    79       @SuppressWarnings({ \"unchecked\"})", "match_type": "ast", "match_rule": "createNativeQuery", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-mail\\src\\main\\java\\com\\gaohanghang\\mail\\common\\Dynamicquery\\DynamicQueryImpl.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    79       @SuppressWarnings({ \"unchecked\"})\n    80       @Override\n    81       public <T> List<T> nativeQueryListModel(Class<T> resultClass, String nativeSql, Object... params) {\n--> 82           Query q = createNativeQuery(nativeSql, params);\n    83           q.unwrap(SQLQuery.class).setResultTransformer(Transformers.aliasToBean(resultClass));\n    84           return q.getResultList();\n    85       }\n    86   \n    87       @Override", "match_type": "ast", "match_rule": "createNativeQuery", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-mail\\src\\main\\java\\com\\gaohanghang\\mail\\common\\Dynamicquery\\DynamicQueryImpl.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    86   \n    87       @Override\n    88       public Long nativeQueryCount(String nativeSql, Object... params) {\n--> 89           Object count = createNativeQuery(nativeSql, params).getSingleResult();\n    90           return ((Number) count).longValue();\n    91       }\n    92   }\n    93   ", "match_type": "ast", "match_rule": "createNativeQuery", "description": "sql注入可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-mail\\src\\main\\java\\com\\gaohanghang\\mail\\common\\Dynamicquery\\DynamicQueryImpl.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    29       private final AtomicInteger count = new AtomicInteger(1);\n    30   \n    31       public void start(final JavaMailSender mailSender, final SimpleMailMessage message) {\n--> 32           service.execute(() -> {\n    33               try {\n    34                   if (count.get() == 2) {\n    35                       service.shutdown();\n    36                       logger.info(\"the task is down\");\n    37                   }", "match_type": "ast", "match_rule": ".execute", "description": "ssrf可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-mail\\src\\main\\java\\com\\gaohanghang\\mail\\common\\util\\MailUtil.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    44       }\n    45   \n    46       public void startHtml(final JavaMailSender mailSender, final MimeMessage message) {\n--> 47           service.execute(() -> {\n    48               try {\n    49                   if (count.get() == 2) {\n    50                       service.shutdown();\n    51                       logger.info(\"the task is down\");\n    52                   }", "match_type": "ast", "match_rule": ".execute", "description": "ssrf可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-mail\\src\\main\\java\\com\\gaohanghang\\mail\\common\\util\\MailUtil.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    38   \t\t\n    39   \t\tfor(final BaseHealthChecker v : _services) \n    40   \t\t{\n--> 41   \t\t\texecutor.execute(v);\n    42   \t\t}\n    43   \t\t\n    44   \t\t_latch.await();\n    45   \t\t\n    46   \t\tfor(final BaseHealthChecker v : _services) ", "match_type": "ast", "match_rule": ".execute", "description": "ssrf可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-mail\\src\\test\\java\\com\\gaohanghang\\mail\\countDownLatch\\ApplicationStartupUtil.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    27   \n    28       @PostMapping(\"/run\")\n    29       public String runCode(@RequestParam(\"source\") String source, Model model) {\n--> 30           String runResult = executeStringSourceService.execute(source);\n    31           runResult = runResult.replaceAll(System.lineSeparator(), \"<br/>\"); // 处理html中换行的问题\n    32   \n    33           model.addAttribute(\"lastSource\", source);\n    34           model.addAttribute(\"runResult\", runResult);\n    35           return \"ide\";", "match_type": "ast", "match_rule": ".execute", "description": "ssrf可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-online-executor\\src\\main\\java\\com\\gaohanghang\\springbootonlineexecutor\\controller\\RunCodeController.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    7       }\n    8   \n    9       public Class loadByte(byte[] classBytes) {\n--> 10           return defineClass(null, classBytes, 0, classBytes.length);\n    11       }\n    12   }\n    13   ", "match_type": "ast", "match_rule": "defineClass", "description": "加载恶意字节码或链接库可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-online-executor\\src\\main\\java\\com\\gaohanghang\\springbootonlineexecutor\\execute\\HotSwapClassLoader.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    7       }\n    8   \n    9       public Class loadByte(byte[] classBytes) {\n--> 10           return defineClass(null, classBytes, 0, classBytes.length);\n    11       }\n    12   }\n    13   ", "match_type": "ast", "match_rule": "defineClass", "description": "加载恶意字节码或链接库可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-online-executor\\src\\main\\java\\com\\gaohanghang\\springbootonlineexecutor\\execute\\HotSwapClassLoader.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    49           Callable<String> runTask = new Callable<String>() {\n    50               @Override\n    51               public String call() throws Exception {\n--> 52                   return JavaClassExecutor.execute(classBytes);\n    53               }\n    54           };\n    55   \n    56           Future<String> res = null;\n    57           try {", "match_type": "ast", "match_rule": ".execute", "description": "ssrf可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-online-executor\\src\\main\\java\\com\\gaohanghang\\springbootonlineexecutor\\service\\ExecuteStringSourceService.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    56   //            }\n    57   //        }.start();\n    58   \n--> 59           String res = executeStringSourceService.execute(source);\n    60           System.out.println(\"---------- Begin ----------\");\n    61           System.out.print(res);\n    62           System.out.println(\"----------- End -----------\");\n    63       }\n    64   }", "match_type": "ast", "match_rule": ".execute", "description": "ssrf可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-online-executor\\src\\test\\java\\com\\gaohanghang\\springbootonlineexecutor\\service\\ExecuteStringSourceServiceTest.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    25               //设置打印格式，因为未确定类型，所以选择autosense\n    26               DocFlavor flavor = DocFlavor.INPUT_STREAM.AUTOSENSE;\n    27               //查找所有的可用的打印服务\n--> 28               PrintService printService[] = PrintServiceLookup.lookupPrintServices(flavor, pras);\n    29               //定位默认的打印服务\n    30               PrintService defaultService = PrintServiceLookup.lookupDefaultPrintService();\n    31               //显示打印对话框\n    32               PrintService service = ServiceUI.printDialog(null, 200, 200, printService,\n    33                       defaultService, flavor, pras);", "match_type": "ast", "match_rule": "lookup", "description": "rmi反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-printer\\src\\main\\java\\com\\gaohanghang\\springbootprinter\\controller\\TestController.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    27               //查找所有的可用的打印服务\n    28               PrintService printService[] = PrintServiceLookup.lookupPrintServices(flavor, pras);\n    29               //定位默认的打印服务\n--> 30               PrintService defaultService = PrintServiceLookup.lookupDefaultPrintService();\n    31               //显示打印对话框\n    32               PrintService service = ServiceUI.printDialog(null, 200, 200, printService,\n    33                       defaultService, flavor, pras);\n    34               if(service != null){\n    35                   try {", "match_type": "ast", "match_rule": "lookup", "description": "rmi反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-printer\\src\\main\\java\\com\\gaohanghang\\springbootprinter\\controller\\TestController.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    26               // 设置打印格式，因为未确定类型，所有选择autosense\n    27               DocFlavor flavor = DocFlavor.INPUT_STREAM.AUTOSENSE;  // 格式\n    28               // 查找所有的可用的打印服务\n--> 29               PrintService printService[] = PrintServiceLookup.lookupPrintServices(flavor, pras); // 属性集\n    30               // 定位默认的打印服务\n    31               PrintService defaultService = PrintServiceLookup.lookupDefaultPrintService();\n    32   \n    33               // 显示打印对话框\n    34               PrintService service = ServiceUI.printDialog(null, 200, 200, printService, defaultService, flavor, pras);", "match_type": "ast", "match_rule": "lookup", "description": "rmi反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-printer\\src\\main\\java\\com\\gaohanghang\\springbootprinter\\controller\\TestController2.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    28               // 查找所有的可用的打印服务\n    29               PrintService printService[] = PrintServiceLookup.lookupPrintServices(flavor, pras); // 属性集\n    30               // 定位默认的打印服务\n--> 31               PrintService defaultService = PrintServiceLookup.lookupDefaultPrintService();\n    32   \n    33               // 显示打印对话框\n    34               PrintService service = ServiceUI.printDialog(null, 200, 200, printService, defaultService, flavor, pras);\n    35               if (service != null) {\n    36                   try {", "match_type": "ast", "match_rule": "lookup", "description": "rmi反序列化可能会出现", "file_path": "./test\\java-project-practice-master\\spring-boot-printer\\src\\main\\java\\com\\gaohanghang\\springbootprinter\\controller\\TestController2.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    26       celery_worker = \"celery -A celery_worker.celery worker --loglevel=debug --logfile={logfile} >{logfile} 2>&1 &\".format(\n    27           logfile=log_path\n    28       )\n--> 29       os.system(celery_worker)\n    30   \n    31   \n    32   if __name__ == \"__main__\":\n    33       async_task_worker()\n    34   ", "match_type": "ast", "match_rule": "os.system", "description": "命令执行", "file_path": "./test\\osroom-dev\\asnyc_task_start.py", "language": "Python", "severity": "critical", "ptype": "漏洞", "confidence": 0.7}, {"context": "    10       print(\" * Asynchronous service: Celery worker starting...\")\n    11       try:\n    12           shcmd = \"\"\"ps -ef | grep celery_worker.celery | awk '{print $2}' | xargs kill -9\"\"\"\n--> 13           os.system(shcmd)\n    14           print(\"   Clean up legacy process successfully\")\n    15       except Exception as e:\n    16           print(e)\n    17   \n    18       log_path = \"{}/celery.log\".format(LOG_PATH)", "match_type": "ast", "match_rule": "os.system", "description": "命令执行", "file_path": "./test\\osroom-dev\\asnyc_task_start.py", "language": "Python", "severity": "critical", "ptype": "漏洞", "confidence": 0.7}, {"context": "    13   \n    14   try:\n    15       shcmd = \"ps -ef | grep celery_worker.celery | grep -v color=auto | awk '{print $2}' | xargs kill -9\"\n--> 16       r = os.system(shcmd)\n    17       print(\"Kill celery_worker.celery.\")\n    18   except Exception as e:\n    19       print(e)\n    20   ", "match_type": "ast", "match_rule": "os.system", "description": "命令执行", "file_path": "./test\\osroom-dev\\kill.py", "language": "Python", "severity": "critical", "ptype": "漏洞", "confidence": 0.7}, {"context": "    5   import os\n    6   try:\n    7       shcmd = \"\"\"ps -ef | grep uwsgi_run.ini | awk '{print $2}' | xargs kill -9\"\"\"\n--> 8       r = os.chmod()\n    9       cookies = pickle.loads(base64.b64decode(cookies))\n    10       print(\"Kill uwsgi.\")\n    11   except Exception as e:\n    12       print(e)\n    13   ", "match_type": "ast", "match_rule": "os.chmod", "description": "权限提升", "file_path": "./test\\osroom-dev\\kill.py", "language": "Python", "severity": "critical", "ptype": "漏洞", "confidence": 0.8}, {"context": "    6   try:\n    7       shcmd = \"\"\"ps -ef | grep uwsgi_run.ini | awk '{print $2}' | xargs kill -9\"\"\"\n    8       r = os.chmod()\n--> 9       cookies = pickle.loads(base64.b64decode(cookies))\n    10       print(\"Kill uwsgi.\")\n    11   except Exception as e:\n    12       print(e)\n    13   \n    14   try:", "match_type": "ast", "match_rule": "pickle.load", "description": "python反序列化", "file_path": "./test\\osroom-dev\\kill.py", "language": "Python", "severity": "low", "ptype": "漏洞", "confidence": 0.5}, {"context": "    6   try:\n    7       shcmd = \"\"\"ps -ef | grep uwsgi_run.ini | awk '{print $2}' | xargs kill -9\"\"\"\n    8       r = os.chmod()\n--> 9       cookies = pickle.loads(base64.b64decode(cookies))\n    10       print(\"Kill uwsgi.\")\n    11   except Exception as e:\n    12       print(e)\n    13   \n    14   try:", "match_type": "ast", "match_rule": "pickle.loads", "description": "python反序列化", "file_path": "./test\\osroom-dev\\kill.py", "language": "Python", "severity": "low", "ptype": "漏洞", "confidence": 0.5}, {"context": "    74       if \"--debug\" in sys_argv:\n    75           sys_argv[sys_argv.index(\"--debug\")] = \"--debugger\"\n    76       flask_server = \"flask run {}\".format(\" \".join(sys_argv))\n--> 77       os.system(flask_server)\n    78   \n    79   \n    80   def parameter_processing(sys_argv, op):\n    81       \"\"\"\n    82       额外的特殊参数处理", "match_type": "ast", "match_rule": "os.system", "description": "命令执行", "file_path": "./test\\osroom-dev\\apps\\develop_run_options.py", "language": "Python", "severity": "critical", "ptype": "漏洞", "confidence": 0.7}, {"context": "    314               get_config(\"py_venv\", \"VENV_PATH\"))\n    315           for package in packages:\n    316               cmd = \"{}pip install -U {}\".format(venv, package)\n--> 317               stdin, stdout, stderr = ssh.exec_cmd(cmd)\n    318               for line in stdout.read().decode().split(\"\\n\"):\n    319                   if re.search(r\"\\s*Successfully\\s+installed.*\", line):\n    320                       result.append(line)\n    321   \n    322           ssh.close()", "match_type": "ast", "match_rule": "exec", "description": "命令执行", "file_path": "./test\\osroom-dev\\apps\\modules\\plug_in_manager\\process\\setting.py", "language": "Python", "severity": "critical", "ptype": "漏洞", "confidence": 0.7}, {"context": "    57       :return:\n    58       \"\"\"\n    59   \n--> 60       data = sys_host_exec_cmd()\n    61       return response_format(data)\n    62   \n    63   \n    64   @api.route('/admin/setting/sys/host/connection-test', methods=['PUT'])\n    65   @osr_login_required", "match_type": "ast", "match_rule": "exec", "description": "命令执行", "file_path": "./test\\osroom-dev\\apps\\modules\\setting\\apis\\host_setting.py", "language": "Python", "severity": "critical", "ptype": "漏洞", "confidence": 0.7}, {"context": "    115           if not exec_cmd and \"cmd\" in host:\n    116               exec_cmd = host[\"cmd\"]\n    117   \n--> 118           for cmd in exec_cmd.split(\"\\n\"):\n    119               cmd = cmd.strip()\n    120               if re.search(r\"^#.*\", cmd):\n    121                   continue\n    122   \n    123               if re.search(", "match_type": "ast", "match_rule": "exec", "description": "命令执行", "file_path": "./test\\osroom-dev\\apps\\modules\\setting\\process\\host_setting.py", "language": "Python", "severity": "critical", "ptype": "漏洞", "confidence": 0.7}, {"context": "    131                   result.append(\n    132                       [gettext('[Warning]: \"rm\" command go to the server')])\n    133               else:\n--> 134                   stdin, stdout, stderr = ssh.exec_cmd(\"nohup {} &\".format(cmd))\n    135                   result.append(stdout.read().decode().split(\"\\n\"))\n    136           ssh.close()\n    137           data = {\"msg\": gettext(\"Command executed {}\").format(ip),\n    138                   \"msg_type\": \"s\", \"custom_status\": 201,\n    139                   \"result\": result, \"cmd\": exec_cmd}", "match_type": "ast", "match_rule": "exec", "description": "命令执行", "file_path": "./test\\osroom-dev\\apps\\modules\\setting\\process\\host_setting.py", "language": "Python", "severity": "critical", "ptype": "漏洞", "confidence": 0.7}, {"context": "    47           try:\n    48               tjson = json.loads(tjson)\n    49           except BaseException:\n--> 50               tjson = eval(tjson)\n    51           else:\n    52               if isinstance(tjson, str):\n    53                   tjson = eval(tjson)\n    54       return tjson\n    55   ", "match_type": "ast", "match_rule": "eval", "description": "命令执行", "file_path": "./test\\osroom-dev\\apps\\utils\\format\\obj_format.py", "language": "Python", "severity": "critical", "ptype": "漏洞", "confidence": 0.7}, {"context": "    50               tjson = eval(tjson)\n    51           else:\n    52               if isinstance(tjson, str):\n--> 53                   tjson = eval(tjson)\n    54       return tjson\n    55   \n    56   \n    57   def pyseq_to_json(pyseq):\n    58       if isinstance(pyseq, tuple):", "match_type": "ast", "match_rule": "eval", "description": "命令执行", "file_path": "./test\\osroom-dev\\apps\\utils\\format\\obj_format.py", "language": "Python", "severity": "critical", "ptype": "漏洞", "confidence": 0.7}, {"context": "    40                   password=password)\n    41   \n    42       def exec_cmd(self, cmd):\n--> 43           return self.client.exec_command(cmd)\n    44   \n    45       def close(self):\n    46           self.client.close()\n    47   \n    48   ", "match_type": "ast", "match_rule": "client.exec_command", "description": "命令执行", "file_path": "./test\\osroom-dev\\apps\\utils\\pyssh\\pyssh.py", "language": "Python", "severity": "critical", "ptype": "漏洞", "confidence": 0.7}, {"context": "    40                   password=password)\n    41   \n    42       def exec_cmd(self, cmd):\n--> 43           return self.client.exec_command(cmd)\n    44   \n    45       def close(self):\n    46           self.client.close()\n    47   \n    48   ", "match_type": "ast", "match_rule": "exec", "description": "命令执行", "file_path": "./test\\osroom-dev\\apps\\utils\\pyssh\\pyssh.py", "language": "Python", "severity": "critical", "ptype": "漏洞", "confidence": 0.7}, {"context": "    154           if not self.quiet:\n    155               self.redirect = \"\"\n    156   \n--> 157           os.system(\n    158               'pybabel {} extract -F {} -k lazy_gettext -o {}/messages.pot {}'.format(\n    159                   self.quiet,\n    160                   self.cfg_path,\n    161                   self.save_path,\n    162                   self.extract_path))", "match_type": "ast", "match_rule": "os.system", "description": "命令执行", "file_path": "./test\\osroom-dev\\tools\\translations\\translations_tool.py", "language": "Python", "severity": "critical", "ptype": "漏洞", "confidence": 0.7}, {"context": "    161                   self.save_path,\n    162                   self.extract_path))\n    163   \n--> 164           os.system(\n    165               'pybabel {} update -i {}/messages.pot -d {}'.format(\n    166                   self.quiet,\n    167                   self.save_path,\n    168                   self.save_path\n    169               ))", "match_type": "ast", "match_rule": "os.system", "description": "命令执行", "file_path": "./test\\osroom-dev\\tools\\translations\\translations_tool.py", "language": "Python", "severity": "critical", "ptype": "漏洞", "confidence": 0.7}, {"context": "    178   \n    179           if not self.quiet:\n    180               self.redirect = \"\"\n--> 181           os.system('pybabel compile -d {} {}'.format(self.save_path, self.redirect))\n    182   \n    183       def cfg_sack(self):\n    184   \n    185           print(\"cfg file: \" + self.cfg_path)\n    186           self.print_cfg()", "match_type": "ast", "match_rule": "os.system", "description": "命令执行", "file_path": "./test\\osroom-dev\\tools\\translations\\translations_tool.py", "language": "Python", "severity": "critical", "ptype": "漏洞", "confidence": 0.7}, {"context": "    126           if self.lan:\n    127               print(\"Extract...\")\n    128               print(self.extract_path)\n--> 129               os.system('pybabel {} extract -F {} -o {}/messages.pot {}'.format(\n    130                   self.quiet, self.cfg_path, self.save_path, self.extract_path))\n    131               print(\"Init...\")\n    132               os.system('pybabel {} init -i {}/messages.pot -d {} -l {}'.format(self.quiet,\n    133                                                                                 self.save_path,\n    134                                                                                 self.save_path,", "match_type": "ast", "match_rule": "os.system", "description": "命令执行", "file_path": "./test\\osroom-dev\\tools\\translations\\translations_tool.py", "language": "Python", "severity": "critical", "ptype": "漏洞", "confidence": 0.7}, {"context": "    129               os.system('pybabel {} extract -F {} -o {}/messages.pot {}'.format(\n    130                   self.quiet, self.cfg_path, self.save_path, self.extract_path))\n    131               print(\"Init...\")\n--> 132               os.system('pybabel {} init -i {}/messages.pot -d {} -l {}'.format(self.quiet,\n    133                                                                                 self.save_path,\n    134                                                                                 self.save_path,\n    135                                                                                 self.lan))\n    136               self.print_cfg()\n    137               print(\"Success\")", "match_type": "ast", "match_rule": "os.system", "description": "命令执行", "file_path": "./test\\osroom-dev\\tools\\translations\\translations_tool.py", "language": "Python", "severity": "critical", "ptype": "漏洞", "confidence": 0.7}, {"context": "    80               elif op == \"--lan\":\n    81                   self.lan = value.strip()\n    82               elif op == \"--all-lan\":\n--> 83                   os.system(\"pybabel --list-locales\")\n    84                   sys.exit()\n    85   \n    86               elif op == \"--cfg\":\n    87                   self.cfg_path = value.strip()\n    88   ", "match_type": "ast", "match_rule": "os.system", "description": "命令执行", "file_path": "./test\\osroom-dev\\tools\\translations\\translations_tool.py", "language": "Python", "severity": "critical", "ptype": "漏洞", "confidence": 0.7}], "basic": {"totleNum": 154, "criticalLevel": 126, "highLevel": 0, "mediumLevel": 0, "lowLevel": 28, "prompt": 0}}